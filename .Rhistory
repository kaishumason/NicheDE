model_1_sig_year = sqrt(model1_year[[2]][j])
PP1_year = rbind(PP1_year,rnorm(length(Y),model_1_mu_year,model_1_sig_year))
PP2_year = rbind(PP2_year,rnorm(length(Y),model_2_mu_year,model_2_sig_year))
}
PP1_year = PP1_year[-1,]
PP2_year = PP2_year[-1,]
PP1_year = exp(PP1_year)
PP2_year = exp(PP2_year)
dim(PP1_year)
burn = 1
X_new = as.matrix(cbind(rep(1,NROW(X)),X))
X_new = as.matrix(cbind(X_new,rep(12,NROW(X))))
N_year = cbind(diag(1,class_num),diag(12,class_num))
PP1_year = matrix(NA,1,length(Y))
PP2_year = matrix(NA,1,length(Y))
#Get predictive posterior samples
for(j in c(burn:n_samp)){
model_2_mu_year = N_year%*%model2_year[[1]][j,] + X_new%*%model2_year[[2]][j,]
model_2_sig_year = sqrt(model2_year[[3]][j])
model_1_mu_year = X_new%*%model1_year[[1]][j,]
model_1_sig_year = sqrt(model1_year[[2]][j])
PP1_year = rbind(PP1_year,rnorm(class_num,model_1_mu_year,model_1_sig_year))
PP2_year = rbind(PP2_year,rnorm(class_num,,model_2_mu_year,model_2_sig_year))
}
class_num
burn = 1
X_new = as.matrix(cbind(rep(1,NROW(X)),X))
X_new = as.matrix(cbind(X_new,rep(12,NROW(X))))
N_year = cbind(diag(1,class_num),diag(12,class_num))
PP1_year = matrix(NA,1,length(Y))
PP2_year = matrix(NA,1,length(Y))
#Get predictive posterior samples
for(j in c(burn:n_samp)){
model_2_mu_year = N_year%*%model2_year[[1]][j,] + X_new%*%model2_year[[2]][j,]
model_2_sig_year = sqrt(model2_year[[3]][j])
model_1_mu_year = X_new%*%model1_year[[1]][j,]
model_1_sig_year = sqrt(model1_year[[2]][j])
PP1_year = rbind(PP1_year,rnorm(class_num,model_1_mu_year,model_1_sig_year))
PP2_year = rbind(PP2_year,rnorm(class_num,,model_2_mu_year,model_2_sig_year))
}
burn = 1
X_new = as.matrix(cbind(rep(1,NROW(X)),X))
X_new = as.matrix(cbind(X_new,rep(12,NROW(X))))
N_year = cbind(diag(1,class_num),diag(12,class_num))
PP1_year = matrix(NA,1,class_num)
PP2_year = matrix(NA,1,class_num)
#Get predictive posterior samples
for(j in c(burn:n_samp)){
model_2_mu_year = N_year%*%model2_year[[1]][j,] + X_new%*%model2_year[[2]][j,]
model_2_sig_year = sqrt(model2_year[[3]][j])
model_1_mu_year = X_new%*%model1_year[[1]][j,]
model_1_sig_year = sqrt(model1_year[[2]][j])
PP1_year = rbind(PP1_year,rnorm(class_num,model_1_mu_year,model_1_sig_year))
PP2_year = rbind(PP2_year,rnorm(class_num,,model_2_mu_year,model_2_sig_year))
}
rnorm(class_num,,model_2_mu_year,model_2_sig_year)
burn = 1
X_new = as.matrix(cbind(rep(1,NROW(X)),X))
X_new = as.matrix(cbind(X_new,rep(12,NROW(X))))
N_year = cbind(diag(1,class_num),diag(12,class_num))
PP1_year = matrix(NA,1,class_num)
PP2_year = matrix(NA,1,class_num)
#Get predictive posterior samples
for(j in c(burn:n_samp)){
model_2_mu_year = N_year%*%model2_year[[1]][j,] + X_new%*%model2_year[[2]][j,]
model_2_sig_year = sqrt(model2_year[[3]][j])
model_1_mu_year = X_new%*%model1_year[[1]][j,]
model_1_sig_year = sqrt(model1_year[[2]][j])
PP1_year = rbind(PP1_year,rnorm(class_num,model_1_mu_year,model_1_sig_year))
PP2_year = rbind(PP2_year,rnorm(class_num,model_2_mu_year,model_2_sig_year))
}
PP1_year = PP1_year[-1,]
PP2_year = PP2_year[-1,]
PP1_year = exp(PP1_year)
PP2_year = exp(PP2_year)
dim(PP!)
dim(PP1)
PP1_interval_year = apply(PP1_year,2,function(x){c(quantile(x,c(0.025,0.975),na.rm = T))})
PP2_interval_year = apply(PP2_year,2,function(x){c(quantile(x,c(0.025,0.975),na.rm = T))})
write.csv(PP1_interval_year,"PP1_year.csv")
write.csv(PP2_interval_year,"PP2_year.csv")
dim(cbind(X_aug,N))
dim(cbind(X_aug,N))
bayes_lin(Y,cbind(X_aug,N),n_samp = n_samp)
dim(Y)
length(Y)
X = as.matrix(X)
Y = as.matrix(Y)
model <- lm(Y~X)
beta.hat <- model$coef
n <- length(Y)
p <- length(beta.hat)
s2 <- (n-p)*summary(model)$sigma^2
V.beta <- summary(model)$cov.unscaled
X_check = c(X_aug,N)
X_check = cbind(X_aug,N)
X = as.matrix(X_check)
Y = as.matrix(Y)
model <- lm(Y~X)
beta.hat <- model$coef
n <- length(Y)
p <- length(beta.hat)
s2 <- (n-p)*summary(model)$sigma^2
V.beta <- summary(model)$cov.unscaled
X = as.matrix(X)
Y = as.matrix(Y)
model <- lm(Y~X)
beta.hat <- model$coef
n <- length(Y)
p <- length(beta.hat)
s2 <- (n-p)*summary(model)$sigma^2
V.beta <- summary(model)$cov.unscaled
4+4
X_check = as.matrix(X_check)
Y = as.matrix(Y)
model <- lm(Y~X_check)
beta.hat <- model$coef
n <- length(Y)
p <- length(beta.hat)
p
s2 <- (n-p)*summary(model)$sigma^2
V.beta <- summary(model)$cov.unscaled
temp <- rgamma(1,shape=(n-p)/2,rate=s2/2)
cursigsq <- 1/temp
curvarbeta <- cursigsq*V.beta
curvarbeta.chol <- t(chol(curvarbeta))
z <- rnorm(p,0,1)
curbeta <- beta.hat+curvarbeta.chol%*%z
dim(z)
length(z)
dim(V.beta)
X = c(2,1,1)
Y = c(5,8,2)
summary(lm(Y~X))
X = matrix(c(4,2,1,3.3,1.3,5.8),3,2)
Y = c(5,8,2)
summary(lm(Y~X))
readRDS("C:\\Users\\Kaishu\\Downloads\\Human_DLPFC_snRNAseq_Nguyen_topLayer.rda")
readRDS("C:\\Users\\Kaishu\\Downloads\\Human_DLPFC_snRNAseq_Nguyen_topLayer.rda")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
readRDS(fdf)
readRDS("C:\\Users\\Kaishu\\Downloads\\Layer2_BC_Count.rds")
load("C:\\Users\\Kaishu\\Downloads\\Human_DLPFC_snRNAseq_Nguyen_topLayer.rda")
load("C:\\Users\\Kaishu\\Downloads\\Human_DLPFC_snRNAseq_Nguyen_topLayer.rda")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("spatialLIBD")
BiocManager::install("spatialLIBD")
packageVersion("spatialLIBD")
check = fetch_data("sce")
library("spatialLIBD")
check = fetch_data("sce")
View(check)
check@metadata[["image"]]
check@assays@data
c =matrix(c(1:9),3,3)
c
as.vector(c)
as.vector(t(c))
dir = "C:\\Users\\Kaishu\\Downloads\\marmgCAMI2_setup.tar\\marmgCAMI2_setup\\simulation_short_read"
A = read.table(paste0(dir,"\\",'abundance0.tsv'),sep = "\t")
A_raw = A[,2]
A_exist = A[,2]>0
for(j in c(1:9)){
B = paste0()
B = read.table(paste0(dir,"\\",'abundance',j,'.tsv'),sep = "\t")
A_raw = A_raw + B[,2]
A_exist = A_exist + (B[,2]>0)
}
index = which(A_exist == 10)
A_raw = A_raw[index]
hist(A_raw)
species = A[index,1]
contig_mapping = read.table(paste0(dir,"\\",'gsa_pooled_mapping_file.tsv'),sep = "\t")
exp0 = read.table(paste0(dir,"\\",'gsa_mapping_0.tsv'),sep = "\t")
exp0$V8 = exp0$V7-exp0$V6
ind_species = which(exp0$V2%in%species)
exp0 = exp0[ind_species,]
MAG_list <- matrix(NA,10,length(species))
cov_list = matrix(NA,10,length(species))
for(j in c(0:9)){
exp0 = read.table(paste0(dir,"\\",'gsa_mapping_',j,'.tsv'),sep = "\t")
exp0$V8 = exp0$V7-exp0$V6
ind_species = which(exp0$V2%in%species)
exp0 = exp0[ind_species,]
exp_cov = read.table(paste0(dir,"\\",'coverage',j,'.tsv'),sep = "\t")
MAG_len = rep(NA,length(species))
cov_len = rep(NA,length(species))
counter = 1
for(s in species){
contig_s = which((exp0$V2 == s) & (exp0$V8 > 500))
data = exp0[contig_s,c(8)]
MAG_len[counter] = sum(data)
counter = counter + 1
}
MAG_list[j+1,] = MAG_len
cov_list[j+1,] = exp_cov[match(species,exp_cov[,1]),2]
}
max_cov = function(lambda,dmin){
p_hat = 1-ppois(dmin-1,lambda)
return(p_hat)
}
ass_comp = max_cov(cov_list,2)
metadata = read.table(paste0(dir,"\\",'metadata','.tsv'),sep = "\t")
tax_prof = read.table(paste0(dir,"\\",'taxonomic_profile','.txt'),sep = "\t")
tax_prof = tax_prof[match(species,tax_prof$V6),]
View(tax_prof)
View(MAG_list)
View(ass_comp)
ass_comp[,]
ass_comp[,5]
MAG_list[,5]
ass_comp[,9]
MAG_list[,9]
MAG_list[,13]
ass_comp[,13]
View(ass_comp)
View(MAG_list)
View(tax_prof)
MAG_list[,15]/4635126
ass_comp[,15]
MAG_list[,15]
ass_comp[,9]
MAG_list[,9]
tax_prof[9,]
source("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Anuja\\niche_gene_functions.R")
#library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(enrichR)
library(hdf5r)
#read in data
sample = "ST-liver1"
type = 'epithelial'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST"))
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#abc = readRDS(paste0(sample,'_NGA_',type,'.rds'))
abc = readRDS(paste0(sample,'_NGA_full_normalized','.rds'))
deconv_true = readRDS('deconv_filtered.rds')
deconv_true = as.matrix(deconv_true)
deconv_est = deconv_true
counts = sobj@assays$Spatial@counts
counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
#read in reference
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\scRNA_mCRC_reference_merged")
L= readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
sim_gene = which(colnames(L) %in% rownames(abc$pg_hoch))
L = L[,sim_gene]
mean(colnames(L)==rownames(abc$pg_hoch))
mean(colnames(L)==dimnames(abc$pgt_analysis$pgt)[[3]])
K = get_K(coord,rank = 0.05)
materials = get_materials(counts,deconv_true,L,K)
nst = materials$nst
EN = materials$EN
#EEX = materials$EEX
colloc = matrix(NA,nrow(deconv_est),ncol(deconv_est)^2)
for(k in c(1:nrow(nst))){
ns = as.matrix(nst[k,])
ps = as.matrix(EN[k,])
EN_j = EN[k,]- nst[k,]
cov_j = ns%*%t(EN_j)
colloc[k,] = as.vector(t(cov_j))
}
ntype = ncol(deconv_est)
colnames(colloc) = c(1:ncol(colloc))
for(cell_type in colnames(deconv_est)){
for(niche_type in colnames(deconv_est)){
type_ind = which(colnames(deconv_est) == cell_type)
niche_ind = which(colnames(deconv_est) == niche_type)
colnames(colloc)[ntype*(type_ind-1) + niche_ind] = paste0(cell_type,":x:",niche_type)
}
}
#View(colloc)
sobj@meta.data = cbind(sobj@meta.data,colloc)
colnames(deconv_est)
sobj@meta.data = cbind(sobj@meta.data,deconv_est)
#visualize deonvolution if wanted
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample,"\\images\\Deconv"))
types=  colnames(deconv_est)
for(j in c(1:length(types))){
png(paste0(types[j],"_deconv_plot.png"))
print(SpatialFeaturePlot(sobj, features = types[j]))
dev.off()
}
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,0.75,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,0.75,2,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,2,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
devtools::document()
library(nicheDE)
load(niche_net_ligand_target_matrix)
load("niche_net_ligand_target_matrix")
load("niche_net_ligand_target_matrix.rda")
load("niche_net_ligand_target_matrix")
library(nicheDE)
data("niche_net_ligand_target_matrix")
View(niche_net_ligand_target_matrix)
A = apply(niche_net_ligand_target_matrix,2,function(order(x,decreasing = T)))
A = apply(niche_net_ligand_target_matrix,2,function(order(x,decreasing = T)))
A = apply(niche_net_ligand_target_matrix,2,function{order(x,decreasing = T)})
A = apply(niche_net_ligand_target_matrix,2,function(x){order(x,decreasing = T)})
View(A)
apply(A,1,function(x){mean(x<=200)})
imp = apply(A,1,function(x){sum(x<=200)})
summary(imp)
mean(imp == 0)
sum(imp == 0)
imp = apply(A,1,function(x){sum(x<=100)})
sum(imp == 0)
