pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
X_partial
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null = which(null < M)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
lm = lm((object@counts[,j] - object@null_expected_expression[,j]) ~ X_partial)
lm$coefficients
NDE_par@niche_DE$`1`$beta[,,9]
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#make NDE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv_est,c(1,100,200))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE = niche_DE(NDE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = F)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
NDE_par@niche_DE$`1`$nulls[[9]]
NDE@niche_DE$`1`$nulls[[9]]
NDE@niche_DE$`1`$nulls[[4]]
NDE_par@niche_DE$`1`$nulls[[4]]
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site()
# library(devtools)
# install_github("navinlabcode/CellTrek")
devtools::install_github("Kmason23/NicheDE") # install
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(foreach)
library(doParallel)
#Make object
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium")
sobj = Load10X_Spatial("22261_visium_aligned", filename="filtered_feature_bc_matrix.h5")
#Make object and read deconvolution
deconv_est = readRDS("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\22261_visium_aligned\\deconv_est.rds")
#read in scrnsseq ref and L
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\scRNA_mCRC_reference")
L = read.table(file = "Library_reference.txt", sep = " ")
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[colnames(deconv_est),]
#make NDE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv_est,c(1,100,200))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE = niche_DE(NDE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#make NDE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv_est,c(1,100,200))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE = niche_DE(NDE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
warnings()
print(end_time-start_time)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
#library(nicheDE)
#THIS is the one i'm using for NGA
nb_lik = function(x,mu,disp){
#returns negative log likelihood: Var = mu + mu^2/size
return(-sum(dnbinom(x=x, size = disp, mu = mu,log = TRUE)))
}
source("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Anuja\\niche_gene_functions_github.R")
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
kernel_materials = vector(mode = 'list',length = 3)
counter_rank = 1
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver1",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver2",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver4",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22996_visium\\outs")
tum_hep_ind = c(1,4)
counter = 1
materials_all = vector(mode = 'list',length = length(direcs))
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
setwd(sample)
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
materials_all[[counter]] = CreateNicheDEObject(counts_mat = counts,coord,L,deconv_true,c(1),counts = T)
#update counter
counter = counter +1
}
NDE = MergeObjects(materials_all)
NDE = CalculateEffectiveNiche(NDE)
rm(list=ls()[! ls() %in% c("NDE")])
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4)
end_time = Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 600, M = 30, gamma = 0.8,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(foreach)
library(doParallel)
#Make object
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium")
sobj = Load10X_Spatial("22261_visium_aligned", filename="filtered_feature_bc_matrix.h5")
#Make object and read deconvolution
deconv_est = readRDS("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\22261_visium_aligned\\deconv_est.rds")
#read in scrnsseq ref and L
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\scRNA_mCRC_reference")
L = read.table(file = "Library_reference.txt", sep = " ")
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[colnames(deconv_est),]
#make NDE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv_est,c(1))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE = niche_DE(NDE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 600, M = 30, gamma = 0.8,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 600, M = 30, gamma = 0.8,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
warnings()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 600, M = 30, gamma = 0.8,cores = 8,Int = T)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 600, M = 30, gamma = 0.8,cores = 8,Int = T,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs.txt")
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
#library(nicheDE)
#THIS is the one i'm using for NGA
nb_lik = function(x,mu,disp){
#returns negative log likelihood: Var = mu + mu^2/size
return(-sum(dnbinom(x=x, size = disp, mu = mu,log = TRUE)))
}
source("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Anuja\\niche_gene_functions_github.R")
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
kernel_materials = vector(mode = 'list',length = 3)
counter_rank = 1
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver1",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver2",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver4",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22996_visium\\outs")
tum_hep_ind = c(1,4)
counter = 1
materials_all = vector(mode = 'list',length = length(direcs))
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
setwd(sample)
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
materials_all[[counter]] = CreateNicheDEObject(counts_mat = counts,coord,L,deconv_true,c(1),counts = T)
#update counter
counter = counter +1
}
NDE = MergeObjects(materials_all)
NDE = CalculateEffectiveNiche(NDE)
rm(list=ls()[! ls() %in% c("NDE")])
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs.txt")
end_time = Sys.time()
print(end_time-start_time)
gc()
memory.linit()
memory.limit()
library(usethis)
usethis::edit_r_environ()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
#library(nicheDE)
#THIS is the one i'm using for NGA
nb_lik = function(x,mu,disp){
#returns negative log likelihood: Var = mu + mu^2/size
return(-sum(dnbinom(x=x, size = disp, mu = mu,log = TRUE)))
}
source("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Anuja\\niche_gene_functions_github.R")
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
kernel_materials = vector(mode = 'list',length = 3)
counter_rank = 1
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver1",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver2",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver4",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22996_visium\\outs")
tum_hep_ind = c(1,4)
counter = 1
materials_all = vector(mode = 'list',length = length(direcs))
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
setwd(sample)
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
materials_all[[counter]] = CreateNicheDEObject(counts_mat = counts,coord,L,deconv_true,c(1,100,250),counts = T)
#update counter
counter = counter +1
}
NDE = MergeObjects(materials_all)
NDE = CalculateEffectiveNiche(NDE)
rm(list=ls()[! ls() %in% c("NDE")])
gc()
object.size(NDE)
object.size(NDE)/1000000000
counter = 1
i = 1
object.size(object@ref_expr[,i])/1000000000
object.size(NDE@ref_expr[,i])/1000000000
object.size(NDE@ref_expr[,i])/1000000
object.size(NDE@effective_niche[[counter]])/1000000
object.size(NDE@num_cells,object@null_expected_expression[,i])/1000000
object.size(NDE@null_expected_expression[,i])/1000000
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs5.txt")
end_time = Sys.time()
print(end_time-start_time)
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs5.txt")
end_time = Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,C = 150, M = 10, gamma = 0.8,cores = 4,Int = T,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs.txt")
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
devtools::install_github("Kmason23/NicheDE") # install
detach("package:nicheDE", unload=TRUE)
devtools::install_github("Kmason23/NicheDE") # install
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs5.txt")
end_time = Sys.time()
print(end_time-start_time)
library(nicheDE)
start_time = Sys.time()
NDE = niche_DE_parallel(NDE,C = 400,M = 10,gamma = 0.8,cores = 4,
outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs5.txt")
end_time = Sys.time()
print(end_time-start_time)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
