check = suppressWarnings({glm(Y~nst,family = 'poisson')})
bad_ind = which(is.na(coef(check)))
num_bad = sum(bad_ind<(index+1))
beta = c(beta,coef(check)[index+1])
pvalues = c(pvalues,summary(check)$coefficients[(index+1-num_bad),4])
}
}
, error = function(e) {
print(paste0("error",j))
skip_to_next <<- TRUE})
}
#adjust pvalues
pvalues = p.adjust(pvalues,method = "BH")
rec_mat = cbind(lr_mat,beta,pvalues)
#look at those with postive beta values
rec_mat = rec_mat[as.numeric(rec_mat[,3])>0,]
#name matrix columns
colnames(rec_mat) = c('ligand','receptor','receptor_beta','receptor_pval')
LR_pairs = rec_mat[,c(1,2,4)]
#extract the confirmed ligands and receptors
if(length(LR_pairs)==0){
stop('no ligand-receptor pairs to report')
}
LR_pairs = LR_pairs[which(as.numeric(LR_pairs[,3])<alpha),c(1:3)]
return(list(L = LR_pairs,top = top_DE))
for(j in unique(LR_pairs[,1])){
#get gene/ligand name
gene_name = unique(LR_pairs[,1])[j]
print(gene_name)
print(names(top_DE))
#match to top_DE list
ID = which(names(top_DE)==gene_name)
print(ID)
#get downstream genes
LR_pairs[which(LR_pairs[,1]==gene_name),3] = top_DE[[ID]]
}
colnames(rec_mat) = c('ligand','receptor','top_downstream_niche_DE_genes')
rownames(rec_mat) = c(1:nrow(rec_mat))
print(paste0('Returning ligand receptor table between ligand expressing cell type ',ligand_cell,
' and receptor expressing cell type ',receptor_cell,'.'))
return(LR_pairs)
}
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
niche_LR_spot = function(object,ligand_cell,receptor_cell,ligand_target_matrix,lr_mat,K = 25,M = 50,alpha = 0.05,truncation_value = 3){
#The ligand expressing cell should be the niche cell
niche = which(colnames(object@num_cells)==ligand_cell)
#The receptor expressing cell should be the index cell
index = which(colnames(object@num_cells)==receptor_cell)
print(paste0('Performing niche-LR with hyperparameters K = ',K,', M = ',M,', alpha = ',alpha,
', truncation value = ',truncation_value,'.'))
print(paste0('Finding ligand receptors between ligand expressing cell type ',ligand_cell,
' and receptor expressing cell type ',receptor_cell,'.'))
#make sure that collocalization occurs
#check to see if they have enough overlap
colloc = check_colloc(object,index,niche)
log_liks = object@niche_DE[[1]]$log_lik
if(length(object@niche_DE)>=2){
for(j in c(2:length(object@niche_DE))){
log_liks = cbind(log_liks,object@niche_DE[[j]]$log_lik)
}
}
if(length(object@niche_DE)>=2){
#get best kernel for each gene
top_kernel = apply(log_liks,1,function(x){order(x,decreasing = T)[1]})
}
if(length(object@niche_DE)==1){
#get best kernel for each gene
top_kernel = rep(1,length(log_liks))
}
#get T_statistic list
T_vector = vector(mode = "list", length = length(object@sigma))
for(j in c(1:length(object@sigma))){
T_vector[[j]] = object@niche_DE[[j]]$T_stat[index,niche,]
}
#truncate niche_DE t-statistic
for(j in c(1:length(T_vector))){
T_vector[[j]] = pmin(T_vector[[j]],abs(truncation_value))
T_vector[[j]] = pmax(T_vector[[j]],-abs(truncation_value))
}
#get library reference
L = object@ref_expr
#get cutoffs to consider a ligand for each cell type
CT_filter = apply(L,1,function(x){quantile(x,0.25)})
#filter ligands
cand_lig = colnames(L)[which(L[niche,]>CT_filter[niche])]
filter = which(colnames(ligand_target_matrix)%in% cand_lig)
ligand_target_matrix = ligand_target_matrix[,filter]
print('Calculating ligand potential scores')
#get ligand potential scores
pear_cor = rep(NA,ncol(ligand_target_matrix))
score_norm = rep(NA,ncol(ligand_target_matrix))
#save top niche-DE genes
top_DE = vector(mode = "list", length = ncol(ligand_target_matrix))
names(top_DE) = colnames(ligand_target_matrix)
#iterate over potential ligands
for(j in c(1:ncol(ligand_target_matrix))){
ligand = colnames(ligand_target_matrix)[j]
if(ligand%in% colnames(L)){
#get which index we need to query for best kernel
ind = which(colnames(L)==ligand)
#get best index
top_index = top_kernel[ind]
#get scores
sig = T_vector[[top_index]]
genes = object@gene_names
filter = which(is.na(sig)==F)
genes = genes[filter]
sig = sig[filter]
#get ligand_potential scores by summing up T_statistics weighted by scaled niche-net scores
ligand_vec = ligand_target_matrix
#filter to only include genes found in data
filter = which(rownames(ligand_vec)%in% genes)
#filter
ligand_vec = ligand_vec[filter,]
filter = which(genes%in%rownames(ligand_vec))
sig = sig[filter]
genes = genes[filter]
ligand_vec = ligand_vec[genes,]
ligand_vec[,j] = scale(ligand_vec[,j])
#get top K downstream genes
top_cors = order(ligand_vec[,j],decreasing = T)[1:K]
#get weights based on scaled niche-net scores
weight = ligand_vec[top_cors,j]/mean(ligand_vec[top_cors,j])
##calculate ligand potential scores
pear_cor[j] = sum(sig[top_cors]*weight)
top_DE[[j]] = (rownames(ligand_vec)[top_cors])[order(sig[top_cors]*weight,decreasing = T)[1:5]]
#get normalizing constant
score_norm[j] = sum(weight^2)
}
}
#get scaled ligand-potential scores
pear_cor = pear_cor/sqrt(score_norm)
#get top candidate ligands
top_index = which(pear_cor>=max(1.64,sort(pear_cor,decreasing = T)[M]))
top_scores= pear_cor[top_index]
#get top candidate ligands
top_genes = colnames(ligand_target_matrix)[top_index]
if(length(top_genes)==0){
stop('No candidate ligands')
}
#################### test candidate ligands
print(paste0('Testing candidate ligands for sufficient expression in cell type ',ligand_cell))
pvalues = c()
beta = c()
for(j in c(1:length(top_genes))){
tryCatch({
#get candidate ligand
gene = top_genes[j]
#get what index it belongs to
index_gene = which(colnames(L)==gene)
#get best kernel
top_index = top_kernel[index_gene]
#get counts data for that gene
data = object@counts
Y = (data[,which(colnames(L)==gene)])
#which spots to look at
#niche_index = which(kernel_materials[[top_index]]$EN[,index]>0)
niche_index = which(object@effective_niche[[top_index]][,index]>min(object@effective_niche[[top_index]][,index]))
#filter data to only look at these spots
Y = Y[niche_index]
#get number of cells per spot
nst = object@num_cells
nst = nst[niche_index,]
nst[,which(L[,index_gene] < CT_filter)] = 0
#run regression of ligand expression on number of cells per spot
if(L[niche,index_gene] < CT_filter[niche]){
beta = c(beta,NA)
pvalues = c(pvalues,NA)
}else{
check = suppressWarnings({glm(Y~nst,family = 'poisson')})
bad_ind = which(is.na(coef(check)))
num_bad = sum(bad_ind<(niche+1))
beta = c(beta,coef(check)[niche+1])
pvalues = c(pvalues,summary(check)$coefficients[(niche+1-num_bad),4])
}
} #get pval
, error = function(e) {
skip_to_next <<- TRUE})
}
#adjust pvalues and get confirmed ligands
pvalues = p.adjust(pvalues,method = 'BH')
ligands = top_genes[which(pvalues<alpha &beta>0)]
#get candidate receptor
rec_ind = which(lr_mat[,1]%in% ligands & lr_mat[,2]%in% colnames(L))
lr_mat = lr_mat[rec_ind,]
receptors = lr_mat[,2]
#run regression to see if receptor is expressed by index cell type
pvalues = c()
beta = c()
gene_name = c()
#iterate over all receptors
print(paste0('Testing candidate receptors for sufficient expression in cell type ',receptor_cell))
for(j in c(1:length(receptors))){
tryCatch({
#get receptor
gene = receptors[j]
#get corresponding ligand
lig = lr_mat[j,1]
#get index for the ligand and the optimal kernel
index_lig = which(colnames(L)==lig)
top_index = top_kernel[index_lig]
#get data
data = object@counts
Y = data[,which(colnames(L)==gene)]
#which spots to look at
#niche_index = which(kernel_materials[[top_index]]$EN[,niche]>0)
niche_index = which(object@effective_niche[[top_index]][,niche]>min(object@effective_niche[[top_index]][,niche]))
#filter based on spots to look at
Y = Y[niche_index]
nst = object@num_cells[niche_index,]
nst[,which(L[,index_lig] < CT_filter)] = 0
#run regression
if(L[index,index_lig] < CT_filter[index]){
beta = c(beta,NA)
pvalues = c(pvalues,NA)
}else{
check = suppressWarnings({glm(Y~nst,family = 'poisson')})
bad_ind = which(is.na(coef(check)))
num_bad = sum(bad_ind<(index+1))
beta = c(beta,coef(check)[index+1])
pvalues = c(pvalues,summary(check)$coefficients[(index+1-num_bad),4])
}
}
, error = function(e) {
print(paste0("error",j))
skip_to_next <<- TRUE})
}
#adjust pvalues
pvalues = p.adjust(pvalues,method = "BH")
rec_mat = cbind(lr_mat,beta,pvalues)
#look at those with postive beta values
rec_mat = rec_mat[as.numeric(rec_mat[,3])>0,]
#name matrix columns
colnames(rec_mat) = c('ligand','receptor','receptor_beta','receptor_pval')
LR_pairs = rec_mat[,c(1,2,4)]
#extract the confirmed ligands and receptors
if(length(LR_pairs)==0){
stop('no ligand-receptor pairs to report')
}
LR_pairs = LR_pairs[which(as.numeric(LR_pairs[,3])<alpha),c(1:3)]
return(list(L = LR_pairs,top = top_DE))
for(j in unique(LR_pairs[,1])){
#get gene/ligand name
gene_name = unique(LR_pairs[,1])[j]
print(gene_name)
print(names(top_DE))
#match to top_DE list
ID = which(names(top_DE)==gene_name)
print(ID)
#get downstream genes
LR_pairs[which(LR_pairs[,1]==gene_name),3] = top_DE[[ID]]
}
colnames(rec_mat) = c('ligand','receptor','top_downstream_niche_DE_genes')
rownames(rec_mat) = c(1:nrow(rec_mat))
print(paste0('Returning ligand receptor table between ligand expressing cell type ',ligand_cell,
' and receptor expressing cell type ',receptor_cell,'.'))
return(LR_pairs)
}
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
niche_LR_spot = function(object,ligand_cell,receptor_cell,ligand_target_matrix,lr_mat,K = 25,M = 50,alpha = 0.05,truncation_value = 3){
#The ligand expressing cell should be the niche cell
niche = which(colnames(object@num_cells)==ligand_cell)
#The receptor expressing cell should be the index cell
index = which(colnames(object@num_cells)==receptor_cell)
print(paste0('Performing niche-LR with hyperparameters K = ',K,', M = ',M,', alpha = ',alpha,
', truncation value = ',truncation_value,'.'))
print(paste0('Finding ligand receptors between ligand expressing cell type ',ligand_cell,
' and receptor expressing cell type ',receptor_cell,'.'))
#make sure that collocalization occurs
#check to see if they have enough overlap
log_liks = object@niche_DE[[1]]$log_lik
if(length(object@niche_DE)>=2){
for(j in c(2:length(object@niche_DE))){
log_liks = cbind(log_liks,object@niche_DE[[j]]$log_lik)
}
}
if(length(object@niche_DE)>=2){
#get best kernel for each gene
top_kernel = apply(log_liks,1,function(x){order(x,decreasing = T)[1]})
}
if(length(object@niche_DE)==1){
#get best kernel for each gene
top_kernel = rep(1,length(log_liks))
}
#get T_statistic list
T_vector = vector(mode = "list", length = length(object@sigma))
for(j in c(1:length(object@sigma))){
T_vector[[j]] = object@niche_DE[[j]]$T_stat[index,niche,]
}
#truncate niche_DE t-statistic
for(j in c(1:length(T_vector))){
T_vector[[j]] = pmin(T_vector[[j]],abs(truncation_value))
T_vector[[j]] = pmax(T_vector[[j]],-abs(truncation_value))
}
#get library reference
L = object@ref_expr
#get cutoffs to consider a ligand for each cell type
CT_filter = apply(L,1,function(x){quantile(x,0.25)})
#filter ligands
cand_lig = colnames(L)[which(L[niche,]>CT_filter[niche])]
filter = which(colnames(ligand_target_matrix)%in% cand_lig)
ligand_target_matrix = ligand_target_matrix[,filter]
print('Calculating ligand potential scores')
#get ligand potential scores
pear_cor = rep(NA,ncol(ligand_target_matrix))
score_norm = rep(NA,ncol(ligand_target_matrix))
#save top niche-DE genes
top_DE = vector(mode = "list", length = ncol(ligand_target_matrix))
names(top_DE) = colnames(ligand_target_matrix)
#iterate over potential ligands
for(j in c(1:ncol(ligand_target_matrix))){
ligand = colnames(ligand_target_matrix)[j]
if(ligand%in% colnames(L)){
#get which index we need to query for best kernel
ind = which(colnames(L)==ligand)
#get best index
top_index = top_kernel[ind]
#get scores
sig = T_vector[[top_index]]
genes = object@gene_names
filter = which(is.na(sig)==F)
genes = genes[filter]
sig = sig[filter]
#get ligand_potential scores by summing up T_statistics weighted by scaled niche-net scores
ligand_vec = ligand_target_matrix
#filter to only include genes found in data
filter = which(rownames(ligand_vec)%in% genes)
#filter
ligand_vec = ligand_vec[filter,]
filter = which(genes%in%rownames(ligand_vec))
sig = sig[filter]
genes = genes[filter]
ligand_vec = ligand_vec[genes,]
ligand_vec[,j] = scale(ligand_vec[,j])
#get top K downstream genes
top_cors = order(ligand_vec[,j],decreasing = T)[1:K]
#get weights based on scaled niche-net scores
weight = ligand_vec[top_cors,j]/mean(ligand_vec[top_cors,j])
##calculate ligand potential scores
pear_cor[j] = sum(sig[top_cors]*weight)
top_DE[[j]] = (rownames(ligand_vec)[top_cors])[order(sig[top_cors]*weight,decreasing = T)[1:5]]
#get normalizing constant
score_norm[j] = sum(weight^2)
}
}
#get scaled ligand-potential scores
pear_cor = pear_cor/sqrt(score_norm)
#get top candidate ligands
top_index = which(pear_cor>=max(1.64,sort(pear_cor,decreasing = T)[M]))
top_scores= pear_cor[top_index]
#get top candidate ligands
top_genes = colnames(ligand_target_matrix)[top_index]
if(length(top_genes)==0){
stop('No candidate ligands')
}
#################### test candidate ligands
print(paste0('Testing candidate ligands for sufficient expression in cell type ',ligand_cell))
pvalues = c()
beta = c()
for(j in c(1:length(top_genes))){
tryCatch({
#get candidate ligand
gene = top_genes[j]
#get what index it belongs to
index_gene = which(colnames(L)==gene)
#get best kernel
top_index = top_kernel[index_gene]
#get counts data for that gene
data = object@counts
Y = (data[,which(colnames(L)==gene)])
#which spots to look at
#niche_index = which(kernel_materials[[top_index]]$EN[,index]>0)
niche_index = which(object@effective_niche[[top_index]][,index]>min(object@effective_niche[[top_index]][,index]))
#filter data to only look at these spots
Y = Y[niche_index]
#get number of cells per spot
nst = object@num_cells
nst = nst[niche_index,]
nst[,which(L[,index_gene] < CT_filter)] = 0
#run regression of ligand expression on number of cells per spot
if(L[niche,index_gene] < CT_filter[niche]){
beta = c(beta,NA)
pvalues = c(pvalues,NA)
}else{
check = suppressWarnings({glm(Y~nst,family = 'poisson')})
bad_ind = which(is.na(coef(check)))
num_bad = sum(bad_ind<(niche+1))
beta = c(beta,coef(check)[niche+1])
pvalues = c(pvalues,summary(check)$coefficients[(niche+1-num_bad),4])
}
} #get pval
, error = function(e) {
skip_to_next <<- TRUE})
}
#adjust pvalues and get confirmed ligands
pvalues = p.adjust(pvalues,method = 'BH')
ligands = top_genes[which(pvalues<alpha &beta>0)]
#get candidate receptor
rec_ind = which(lr_mat[,1]%in% ligands & lr_mat[,2]%in% colnames(L))
lr_mat = lr_mat[rec_ind,]
receptors = lr_mat[,2]
#run regression to see if receptor is expressed by index cell type
pvalues = c()
beta = c()
gene_name = c()
#iterate over all receptors
print(paste0('Testing candidate receptors for sufficient expression in cell type ',receptor_cell))
for(j in c(1:length(receptors))){
tryCatch({
#get receptor
gene = receptors[j]
#get corresponding ligand
lig = lr_mat[j,1]
#get index for the ligand and the optimal kernel
index_lig = which(colnames(L)==lig)
top_index = top_kernel[index_lig]
#get data
data = object@counts
Y = data[,which(colnames(L)==gene)]
#which spots to look at
#niche_index = which(kernel_materials[[top_index]]$EN[,niche]>0)
niche_index = which(object@effective_niche[[top_index]][,niche]>min(object@effective_niche[[top_index]][,niche]))
#filter based on spots to look at
Y = Y[niche_index]
nst = object@num_cells[niche_index,]
nst[,which(L[,index_lig] < CT_filter)] = 0
#run regression
if(L[index,index_lig] < CT_filter[index]){
beta = c(beta,NA)
pvalues = c(pvalues,NA)
}else{
check = suppressWarnings({glm(Y~nst,family = 'poisson')})
bad_ind = which(is.na(coef(check)))
num_bad = sum(bad_ind<(index+1))
beta = c(beta,coef(check)[index+1])
pvalues = c(pvalues,summary(check)$coefficients[(index+1-num_bad),4])
}
}
, error = function(e) {
print(paste0("error",j))
skip_to_next <<- TRUE})
}
#adjust pvalues
pvalues = p.adjust(pvalues,method = "BH")
rec_mat = cbind(lr_mat,beta,pvalues)
#look at those with postive beta values
rec_mat = rec_mat[as.numeric(rec_mat[,3])>0,]
#name matrix columns
colnames(rec_mat) = c('ligand','receptor','receptor_beta','receptor_pval')
LR_pairs = rec_mat[,c(1,2,4)]
#extract the confirmed ligands and receptors
if(length(LR_pairs)==0){
stop('no ligand-receptor pairs to report')
}
LR_pairs = LR_pairs[which(as.numeric(LR_pairs[,3])<alpha),c(1:3)]
return(list(L = LR_pairs,top = top_DE))
for(j in unique(LR_pairs[,1])){
#get gene/ligand name
gene_name = unique(LR_pairs[,1])[j]
print(gene_name)
print(names(top_DE))
#match to top_DE list
ID = which(names(top_DE)==gene_name)
print(ID)
#get downstream genes
LR_pairs[which(LR_pairs[,1]==gene_name),3] = top_DE[[ID]]
}
colnames(rec_mat) = c('ligand','receptor','top_downstream_niche_DE_genes')
rownames(rec_mat) = c(1:nrow(rec_mat))
print(paste0('Returning ligand receptor table between ligand expressing cell type ',ligand_cell,
' and receptor expressing cell type ',receptor_cell,'.'))
return(LR_pairs)
}
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
View(fibro_tumor_LR)
View(fibro_tumor_LR$L)
A =fibro_tumor_LR$L
unique(A[,1])
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
rm(list = c("niche_LR_spot"))
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
Merged_NDE = readRDS('NDE_22261.rds')
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
paste(c('this ','is'),collapse = ' ')
paste(c('this ','is'),collapse = ',')
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
