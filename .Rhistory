angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
hist(data_parse$angle)
hist(data_parse$angle[data_parse$shot_outcome == 0])
hist(data_parse$angle[data_parse$shot_outcome == 1])
tan(-0.05)
hist(DR$angle)
hist(DL$angle)
View(data_parse)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,opta_body_part,shot_outcome))
dist_goal = function(x,y){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100*(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100*(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
x1 = c(97.9759615*105.0268/100,48.91667*68.64919/100)
x2 = c(105.0268,68.64919/2)
sqrt(sum(c(x1-x2)^2))
x1
x2
x1 = c(77.5*105.0268/100,40.6*68.64919/100)
sqrt(sum(c(x1-x2)^2))
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100*(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100*(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
hist(data_parse$dist)
table(data_parse$dist[data_parse$shot_outcome == 1])
plot(ecdf(data_parse$dist[data_parse$shot_outcome == 1]))
quantile(data_parse$dist[data_parse$shot_outcome == 1],0.80)
quantile(data_parse$dist[data_parse$shot_outcome == 1],0.80,na.rm =T)
quantile(data_parse$dist)
quantile(data_parse$dist,0.8,na.rm = T)
quantile(data_parse$dist,0.5,na.rm = T)
install.packages("readxl")
# importing required packages
library(readxl)
library(dplyr)
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
# print data frame
print(data_frame)
}
# specifying the path name
path <- "/Users/kmason/Desktop/Book1.xlsx"
flops = multiplesheets(path)
cards = flops$overbet$Tree
EV_small = flops$small$EV
EV_mid = flops$mid$EV
EV_overbet = flops$overbet$EV
data = data.frame(cards,EV_small,EV_mid,EV_overbet)
data$best = apply(data,1,function(x){c("small","mid","overbet")[which.max(unname(x[2:length(x)]))]})
data$edge = apply(data,1,function(x){max(x[2:4]) - min(x[2:4])})
overbet_boards = data%>%filter(best == "overbet")
mid_boards = data%>%filter(best == "mid")
small_boards = data%>%filter(best == "small")
View(overbet_boards)
View(small_boards)
View(overbet_boards)
View(mid_boards)
View(data)
###Step 0: Packages
library(spacexr)
library(Matrix)
library(Seurat)
##download spacexr is not installed
#library(devtools)
#devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
###STEP 1: Read in reference dataset
#Read in reference
data("liver_met_ref")
refr = liver_met_ref
#get cell types of reference dataset
cell_types = Idents(refr)
#drop levels
cell_types = droplevels(cell_types)
#get raw data matrix
count_raw <- refr@assays$RNA@counts
# make reference dataset
reference <- Reference(count_raw, cell_types = cell_types)
###STEP 2: Read in spatial data
#Read in seurat data. In practice, use seurat function to read in data
data("liver_met_seurat_object")
seurat_object = liver_met_seurat_object
#get counts matrix
counts = seurat_object@assays$Spatial@counts
#save gene and cell names for later
genes = colnames(counts)
spots = rownames(counts)
#reformat counts matrix to sparse matrix
counts = as(counts,'sparseMatrix')
#name column and row names
colnames(counts) = genes
rownames(counts) = spots
#get coordinate matrix
coord = GetTissueCoordinates(seurat_object)
#make spatial puck
puck <- SpatialRNA(coord, counts)
###STEP 3: create an RCTD object
#create an RCTD object. Here we set the max number of cell types in a spot to be 4.
#see documentation for other parameter choices
myRCTD <- create.RCTD(puck, reference, max_cores = 1, UMI_min = 0,MAX_MULTI_TYPES = 4)
#Run RCTD
myRCTD@cell_type_info
View(myRCTD)
dim(refr)
cell_libs = colSums(refr)
cell_ct = Idents(refr)
cell_ct
w = c(90,10)
tau = (0.9,0.1)
tau = c(0.9,0.1)
tau*1/w
tau = c(0.5,0.5)
tau*1/w
(tau*1/w)/sum(tau*1/w)
###Step 0: Packages
library(spacexr)
library(Matrix)
library(Seurat)
##download spacexr is not installed
#library(devtools)
#devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
###STEP 1: Read in reference dataset
#Read in reference
data("liver_met_ref")
refr = liver_met_ref
#get cell types of reference dataset
cell_types = Idents(refr)
#drop levels
cell_types = droplevels(cell_types)
#get raw data matrix
count_raw <- refr@assays$RNA@counts
# make reference dataset
reference <- Reference(count_raw, cell_types = cell_types)
###STEP 2: Read in spatial data
#Read in seurat data. In practice, use seurat function to read in data
data("liver_met_seurat_object")
seurat_object = liver_met_seurat_object
#get counts matrix
counts = seurat_object@assays$Spatial@counts
#save gene and cell names for later
genes = colnames(counts)
spots = rownames(counts)
#reformat counts matrix to sparse matrix
counts = as(counts,'sparseMatrix')
#name column and row names
colnames(counts) = genes
rownames(counts) = spots
#get coordinate matrix
coord = GetTissueCoordinates(seurat_object)
#make spatial puck
puck <- SpatialRNA(coord, counts)
###STEP 3: create an RCTD object
#create an RCTD object. Here we set the max number of cell types in a spot to be 4.
#see documentation for other parameter choices
myRCTD <- create.RCTD(puck, reference, max_cores = 1, UMI_min = 0,MAX_MULTI_TYPES = 4)
#Run RCTD
myRCTD <- run.RCTD(myRCTD, doublet_mode = "multi")
#get unique cell types
CT = unique(cell_types)
#get library size for each cell type
lib_sizes = rep(NA,length(CT))
#get cell specific library sizes and cell type
cell_libs = colSums(refr)
#get cell types of cells from reference
cell_ct = Idents(refr)
#iterate over each cell type
for(j in c(1:length(CT))){
ct = CT[j]
lib_sizes[j] = mean(cell_libs[cell_ct==ct])
}
#initialize the deconvolution matrix
deconv_est = matrix(0,nrow(coord),length(CT))
#Column names will be cell types
colnames(deconv_est) = CT
#rownames will be spot names
rownames(deconv_est) = rownames(coord)
#iterate over deconvolution results
for(j in c(1:length(myRCTD@results))){
#match cell types found to index of unique cell type vector
fills = match(myRCTD@results[[j]]$cell_type_list,CT)
#fill in matrix
deconv_est[j,fills] = myRCTD@results[[j]]$sub_weights
#normalize so that rows sum to 1
deconv_est[j,] = deconv_est[j,]/sum(deconv_est[j,])
#normalize by cell weight (Thanks to Istvan Kleijn)
spot_lib = deconv_est[j,]*1/lib_sizes
#renormalize by cell type normalized weights
deconv_est[j,] = spot_lib/sum(spot_lib)
}
#final output
deconv_est
#get unique cell types
CT = unique(cell_types)
#get library size for each cell type
lib_sizes = rep(NA,length(CT))
#get cell specific library sizes and cell type
cell_libs = colSums(refr)
#get cell types of cells from reference
cell_ct = Idents(refr)
#iterate over each cell type
for(j in c(1:length(CT))){
ct = CT[j]
lib_sizes[j] = mean(cell_libs[cell_ct==ct])
}
#initialize the deconvolution matrix
deconv_est = matrix(0,nrow(coord),length(CT))
#Column names will be cell types
colnames(deconv_est) = CT
#rownames will be spot names
rownames(deconv_est) = rownames(coord)
#iterate over deconvolution results
for(j in c(1:length(myRCTD@results))){
#match cell types found to index of unique cell type vector
fills = match(myRCTD@results[[j]]$cell_type_list,CT)
#fill in matrix
deconv_est[j,fills] = myRCTD@results[[j]]$sub_weights
#normalize so that rows sum to 1
deconv_est[j,] = deconv_est[j,]/sum(deconv_est[j,])
#normalize by cell weight (Thanks to Istvan Kleijn)
spot_lib = deconv_est[j,]*1/lib_sizes
#renormalize by cell type normalized weights
#deconv_est[j,] = spot_lib/sum(spot_lib)
}
#final output
View(deconv_est)
spot_lib
deconv_est[j,]
lib_sizes
solSums(refr)
check = colSums(refr)
hist(check)
check[cell_ct == "Stromal"]
check[cell_ct == "stromal"]
mean(check[cell_ct == "stromal"])
old = deconv_est
###Step 4: Reformat results into a matrix
#get unique cell types
CT = unique(cell_types)
#get library size for each cell type
lib_sizes = rep(NA,length(CT))
#get cell specific library sizes and cell type
cell_libs = colSums(refr)
#get cell types of cells from reference
cell_ct = Idents(refr)
#iterate over each cell type
for(j in c(1:length(CT))){
ct = CT[j]
lib_sizes[j] = mean(cell_libs[cell_ct==ct])
}
#initialize the deconvolution matrix
deconv_est = matrix(0,nrow(coord),length(CT))
#Column names will be cell types
colnames(deconv_est) = CT
#rownames will be spot names
rownames(deconv_est) = rownames(coord)
#iterate over deconvolution results
for(j in c(1:length(myRCTD@results))){
#match cell types found to index of unique cell type vector
fills = match(myRCTD@results[[j]]$cell_type_list,CT)
#fill in matrix
deconv_est[j,fills] = myRCTD@results[[j]]$sub_weights
#normalize so that rows sum to 1
deconv_est[j,] = deconv_est[j,]/sum(deconv_est[j,])
#normalize by cell weight (Thanks to Istvan Kleijn)
spot_lib = deconv_est[j,]*1/lib_sizes
#renormalize by cell type normalized weights
deconv_est[j,] = spot_lib/sum(spot_lib)
}
#final output
deconv_est
View(old)
View(deconv_est)
setwd("/Users/kmason/Desktop/Folders/research_projects/NicheDE")
options(rmarkdown.html_vignette.check_title = FALSE)
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site()
