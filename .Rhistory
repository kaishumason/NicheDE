ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
pkgdown::build_site_github_pages()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'interaction',index='tumor_epithelial',niche = 'stromal',direction = 'positive',alpha = 0.05)
View(tum_fibro_minus)
View(tum_fibro_minus)
fibro_tum_markers = niche_DE_markers(Merged_NDE,index = 'stromal',niche1='tumor_epithelial',niche2='myeloid',0.05)
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
pkgdown::build_site_github_pages()
evtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
j = 7379
object = Merged_NDE
#starting Message
print(paste0('Starting Niche-DE analysis with parameters C = ',C,', M = ',M,', gamma = ', gamma,'.'))
#initialize list output
object@niche_DE = vector(mode = "list", length = length(object@sigma))
names(object@niche_DE) = object@sigma
counter = 1
j = 7379
object = Merged_NDE
sig = 1
j = 7379
object = Merged_NDE
sig = 1
C = 150
M = 10
gamma = 0.8
print = T
print(paste0('Performing Niche-DE analysis with kernel bandwidth:',sig,' (number ',counter,' out of ',length(object@sigma),' values)'))
#get expression filter (gamma)
CT_filter = apply(object@ref_expr,1,function(x){quantile(x,gamma)})
#initialize p value array
ngene = ncol(object@counts)
n_type = ncol(object@num_cells)
dimnames = list(A = colnames(object@num_cells),B  = colnames(object@num_cells), C = colnames(object@counts))
#pgt is index type by niche type by gene
T_stat = array(NA,c(n_type,n_type,ngene),dimnames = dimnames)
var_cov = array(NA,c(n_type^2,n_type^2,ngene))
betas = array(NA,c(n_type,n_type,ngene),dimnames = dimnames)
liks = rep(NA,ngene)
#get pstg matrix
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
g
null = which(apply(X,2,function(x){sum(x>0)})<M)
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
bad_ind  = which(object@null_expected_expression[,j]==0)
#print('Running GLM')
#run neg binom regression
#print(2)
if(length(bad_ind)>0){
full_glm =suppressWarnings({glm(object@counts[-bad_ind,j]~X_partial[-bad_ind,] + offset(log(object@null_expected_expression[-bad_ind,j])), family = "poisson")}) #do full glm
}else{
full_glm = suppressWarnings({glm(object@counts[,j]~X_partial + offset(log(object@null_expected_expression[,j])), family = "poisson")}) #do full glm
}
mu_hat = exp(predict(full_glm))#get mean
#get dicpersion parameter
A = optimize(nb_lik,x = object@counts[,j],mu = mu_hat, lower = 0.05, upper = 100) #get overdispersion parameter
#save dispersion parameter
disp = A$minimum
#save likelihood
liks[j] = -A$objective
#calculate W matrix for distribution of beta hat
W =as.vector(mu_hat/(1 + mu_hat/disp))#get W matrix
#print(3)
#perform cholesky decomp for finding inverse of X^TWX
if(length(bad_ind)>0){
X_partial = as((X_partial[-bad_ind,]),"sparseMatrix")
#remove bad indices
}else{
X_partial = as((X_partial),"sparseMatrix")
}
#get variance matrix
var_mat = Matrix::t(X_partial*W)%*%X_partial
#if there are degenerate columns, remove them
new_null = c()
if(length(bad_ind)>0){
new_null = which(diag(as.matrix(var_mat))==0)
if(length(new_null)>0){
var_mat = var_mat[-new_null,-new_null]
null = sort(c(null,rest[new_null]))
}
}
A = Matrix::chol(var_mat,LDL = FALSE,perm = FALSE)
#get covaraince matrix
V = solve(A)%*%Matrix::t(solve(A))
#get standard devaition vector
tau = sqrt(diag(V))#get sd matrix
V_ = matrix(NA,n_type,n_type)
if(length(null)==0){
V_ = matrix(tau,n_type,n_type)
}else{
V_[c(1:n_type^2)[-null]] = tau}
#for full var_cov matrix.
v_cov = matrix(NA,n_type^2,n_type^2)
if(length(null)==0){
v_cov = matrix(V,n_type^2,n_type^2)
}else{
v_cov[-null,-null] = as.matrix(V)}
#print('getting beta')
beta = matrix(NA,n_type,n_type)
View(A)
View(as.matrix(A))
dim(A)
dim(var_mat)
new_null
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
pkgdown::build_site_github_pages()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
#usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
print(Merged_NDE)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'interaction',index='tumor_epithelial',niche = 'stromal',direction = 'positive',alpha = 0.05)
View(tum_fibro_minus)
View(tum_fibro_minus)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'cell type',index='tumor_epithelial',niche = 'stromal',direction = 'positive',alpha = 0.05)
View(tum_fibro_minus)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'gene',index='tumor_epithelial',niche = 'stromal',direction = 'positive',alpha = 0.05)
View(tum_fibro_minus)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'interaction',index='tumor_epithelial',niche = 'stromal',direction = 'negative',alpha = 0.05)
View(tum_fibro_minus)
fibro_tum_markers = niche_DE_markers(Merged_NDE,index = 'stromal',niche1='tumor_epithelial',niche2='myeloid',0.05)
View(fibro_tum_markers)
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
Merged_NDE = readRDS('NDE_22261.rds')
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'interaction',index='tumor_epithelial',niche = 'stromal',direction = 'negative',alpha = 0.05)
#get marker genes
fibro_tum_markers = niche_DE_markers(Merged_NDE,index = 'stromal',niche1='tumor_epithelial',niche2='myeloid',0.05)
#preview output
head(fibro_tum_markers)
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
#perform niche-DE
Merged_NDE = niche_DE(Merged_NDE,C = 150)
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
saveRDS(Merged_NDE,'NDE_22261.rds')
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
#library(enrichR)
library(varhandle)
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
Merged_NDE = readRDS('NDE_22261.rds')
#Figure 4 Pathway enrichment analysis for fibroblasts and tumor
library(enrichR)
#get fibroblast tumor niche genes
tum_fibro_minus = get_niche_DE_genes(Merged_NDE,'interaction',index='tumor_epithelial',niche = 'stromal',direction = 'negative',alpha = 0.05)
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot(Merged_NDE,ligand_cell = 'tumor_epithelial',receptor_cell = 'stromal',
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list,K = 25,M = 50,alpha = 0.05,truncation_value = 3)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
