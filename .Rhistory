data_parse$angle = angle(data_parse$pitchLength,data_parse$pitchWidth,data_parse$near,data_parse$x,data_parse$y)
angle = function(pitchLength,pitchWidth,near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = pitchLength
#center of goal is always just pitchwidth/2
end_y = pitchWidth/2
#get vertical posotion of middle of goal
vert = abs(y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$ddist = dist
data_parse$angle = angle(data_parse$pitchLength,data_parse$pitchWidth,data_parse$near,data_parse$x,data_parse$y)
View(data_parse)
hist(data_parse$angle)
View(data_parse)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
View(data_parse)
mean(data_parse$shot_outcome)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_body_part,opta_GK_locy,pitchLength,pitchWidth,shot_outcome))
dist_goal = function(pitchLength,pitchWidth,x,y){
lend_x = 0
rend_x = pitchLength
end_y = pitchWidth/2
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(pitchLength,pitchWidth,near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = pitchLength
#center of goal is always just pitchwidth/2
end_y = pitchWidth/2
#get vertical posotion of middle of goal
vert = abs(y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$pitchLength,data_parse$pitchWidth,data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
View(data_parse)
plot(rbind(c(77.5,40.6),c(105.0268,34)))
shot = c(77.5,40.6)
goal = c(105.0268,34)
sqrt(sum((shot-goal)^2))
atan(6.6/27.5268)
atan(6.28/27.5268)
View(data_parse)
data_parse = data_parse%>%mutate(left = y < pitchWidth/2)
data_parse = data_parse%>%mutate(right  = y > pitchWidth/2)
View(data_parse)
D = data_parse%>%filter(opta_body_part == "foot_R")
atan(-6.28/27.5268)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_body_part,opta_GK_locy,pitchLength,pitchWidth,shot_outcome))
dist_goal = function(pitchLength,pitchWidth,x,y){
lend_x = 0
rend_x = pitchLength
end_y = pitchWidth/2
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(pitchLength,pitchWidth,near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = pitchLength
#center of goal is always just pitchwidth/2
end_y = pitchWidth/2
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$pitchLength,data_parse$pitchWidth,data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < pitchWidth/2)
data_parse = data_parse%>%mutate(right  = y > pitchWidth/2)
D = data_parse%>%filter(opta_body_part == "foot_R")
View(data_parse)
summary(D$left)
summary(D$left)
summary(D$right)
summary(D$left)/nrow(D)
nrow(D)
table(D$left)/nrow(D)
table(DR$left)/nrow(DR)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
nrow(DL)
nrow(DR)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
hist(data_parse$angle)
plot(cbind(data_parse$x,data_parse$y))
mean(data$pitchLength)
mean(data$pitchLength,na.rm= T)
mean(data$pitchWidth,na.rm= T)
mean(data$y?data$pitchWidth)
mean(data$y>data$pitchWidth)
mean(data$y>data$pitchWidth,na.rm = T)
View(data)
hist(data_parse$y)
mean(data_parse$y > 68)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(pitchLength,pitchWidth,x,y){
lend_x = 0
rend_x = pitchLength
end_y = pitchWidth/2
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(pitchLength,pitchWidth,near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = pitchLength
#center of goal is always just pitchwidth/2
end_y = pitchWidth/2
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$pitchLength,data_parse$pitchWidth,data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < pitchWidth/2)
data_parse = data_parse%>%mutate(right  = y > pitchWidth/2)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
hist(data_parse$opta_GK_locy)
hist(data_parse$opta_GK_locx)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$pitchLength,data_parse$pitchWidth,data_parse$x,data_parse$y)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
hist(data_parse$angle)
hist(data_parse$angle[data_parse$shot_outcome == 0])
hist(data_parse$angle[data_parse$shot_outcome == 1])
tan(-0.05)
hist(DR$angle)
hist(DL$angle)
View(data_parse)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,opta_body_part,shot_outcome))
dist_goal = function(x,y){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(x-lend_x,y-end_y)^2
rdist = cbind(x-rend_x,y-end_y)^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)
#get horizontal distance
horizontal = abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near)
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100*(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100*(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
x1 = c(97.9759615*105.0268/100,48.91667*68.64919/100)
x2 = c(105.0268,68.64919/2)
sqrt(sum(c(x1-x2)^2))
x1
x2
x1 = c(77.5*105.0268/100,40.6*68.64919/100)
sqrt(sum(c(x1-x2)^2))
library(jsonlite)
library(dplyr)
data = read.csv("/Users/kmason/Desktop/Folders/research_projects/XG/opta_shots_withQual_2021_2022.csv")
data_parse = data%>%select(c(x,y,opta_GK_locx,opta_GK_locy,pitchLength,pitchWidth,opta_body_part,shot_outcome))
dist_goal = function(x,y,pitchLength,pitchWidth){
lend_x = 0
rend_x = 100
end_y = 50
ldist = cbind(pitchLength/100*(x-lend_x),pitchWidth/100*(y-end_y))^2
rdist = cbind(pitchLength/100*(x-rend_x),pitchWidth/100*(y-end_y))^2
ldist = apply(ldist,1,function(x){sqrt(sum(x))})
rdist = apply(rdist,1,function(x){sqrt(sum(x))})
return(cbind(ldist,rdist))
}
angle = function(near,x,y,pitchLength,pitchWidth){
#if shootin gon near side, goal is at 0
end_x_near = 0
#if shooting at far side goal is at pitch length
end_x_far = 100
#center of goal is always just pitchwidth/2
end_y = 50
#get vertical posotion of middle of goal
vert = (y-end_y)*pitchWidth/100
#get horizontal distance
horizontal = (abs(x-end_x_near)*near + abs(x-end_x_far)*(1-near))*pitchLength/100
#angle is tangent inverse
angle = atan(vert/horizontal)
return(angle)
}
distances = dist_goal(data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
near = apply(distances,1,function(x){x[1]<x[2]})
far = apply(distances,1,function(x){x[1]>x[2]})
dist = apply(distances,1,function(x){min(x)})
data_parse$near = near
data_parse$far = far
data_parse$dist = dist
data_parse$angle = angle(data_parse$near,data_parse$x,data_parse$y,data_parse$pitchLength,data_parse$pitchWidth)
data_parse = data_parse%>%mutate(shot_outcome = as.numeric(shot_outcome == "goal"))
data_parse = data_parse%>%mutate(left = y < 50)
data_parse = data_parse%>%mutate(right  = y > 50)
DR = data_parse%>%filter(opta_body_part == "foot_R")
DL = data_parse%>%filter(opta_body_part == "foot_L")
table(DR$left)/nrow(DR)
table(DR$right)/nrow(DR)
table(DL$left)/nrow(DL)
table(DL$right)/nrow(DL)
View(data_parse)
hist(data_parse$dist)
table(data_parse$dist[data_parse$shot_outcome == 1])
plot(ecdf(data_parse$dist[data_parse$shot_outcome == 1]))
quantile(data_parse$dist[data_parse$shot_outcome == 1],0.80)
quantile(data_parse$dist[data_parse$shot_outcome == 1],0.80,na.rm =T)
quantile(data_parse$dist)
quantile(data_parse$dist,0.8,na.rm = T)
quantile(data_parse$dist,0.5,na.rm = T)
install.packages("readxl")
# importing required packages
library(readxl)
library(dplyr)
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
# print data frame
print(data_frame)
}
# specifying the path name
path <- "/Users/kmason/Desktop/Book1.xlsx"
flops = multiplesheets(path)
cards = flops$overbet$Tree
EV_small = flops$small$EV
EV_mid = flops$mid$EV
EV_overbet = flops$overbet$EV
data = data.frame(cards,EV_small,EV_mid,EV_overbet)
data$best = apply(data,1,function(x){c("small","mid","overbet")[which.max(unname(x[2:length(x)]))]})
data$edge = apply(data,1,function(x){max(x[2:4]) - min(x[2:4])})
overbet_boards = data%>%filter(best == "overbet")
mid_boards = data%>%filter(best == "mid")
small_boards = data%>%filter(best == "small")
View(overbet_boards)
View(small_boards)
View(overbet_boards)
View(mid_boards)
View(data)
