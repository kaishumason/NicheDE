View(Merged_NDE@effective_niche[["1"]])
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
roxygen2::roxygenise(clean = TRUE)
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
options(rmarkdown.html_vignette.check_title = FALSE)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
options(rmarkdown.html_vignette.check_title = FALSE)
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
options(rmarkdown.html_vignette.check_title = FALSE)
devtools::document()
library(Matrix)
library(Seurat)
library(ggplot2)
library(abind)
library(enrichR)
#read in sample names
sample = c("HK_2871","HK_2873")
#read niche-DE objects
NDE_2871 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[1],"\\nicheDE.rds"))
NDE_2873 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[2],"\\nicheDE.rds"))
#merge objects
NDE = MergeObjects(list(NDE_1 = NDE_2871,NDE_2 = NDE_2873))
#calculate effecive niche
NDE = CalculateEffectiveNiche(NDE)
#register cluster
cl <- parallel::makeCluster(4,outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs2871.txt")
doParallel::registerDoParallel(cl)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-De
NDE = niche_DE_new(NDE,cluster = cl,C = 300,M = 20,gamma = 0.8,print = T,Int = T,self_EN = F)
#end time of function
end_time <- Sys.time()
#print how long it takes to run niche-DE
print(end_time-start_time)
#close cluster
doParallel::stopImplicitCluster()
saveRDS(NDE,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\integrated_2871_2873_nicheDE_new.rds")
library(CellTrek)
library(ggplot2)
#library(nicheDE)
library(Seurat)
library(varhandle)
library(proxy)
#load cell trek data for HK2770
sample = "HK_2873"
sample_ = gsub("_","",sample)
if(sample %in% c("HK_2871","HK_2873")){
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SC_celltrek.New.4.11.2023.rds"))
}else{
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SN_celltrek.New.4.11.2023.rds"))
}
celltrek@meta.data$orig.ident = gsub("\\_","",celltrek@meta.data$orig.ident)
#plot celltrek results
Idents(celltrek) = celltrek@meta.data$Idents
#merge cell types
ID = unfactor(celltrek@meta.data$Idents)
#read in visium data
setwd("C:\\Users\\Kaishu\\Desktop\\Amin_ST")
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#get tissue coordiantes: celltrek
coord_mat = GetTissueCoordinates(celltrek)
#get tissue coordiantes: celltrek
sobj_coord = GetTissueCoordinates(sobj)
#get radius in pixel space
r = (sobj@images$slice1@scale.factors$fiducial * sobj@images$slice1@scale.factors$lowres)/2
#get cell types
celltypes = Idents(celltrek)
CT = unique(celltypes)
#put cell types into clusters
PT = c("PT_S1","PT_S2","PT_S3")
DC = c("pDC","cDC")
IC = c("IC_A","IC_B")
B = c("B_memory","B_Naiive","Plasma_Cells")
#merge cell types
ID[ID %in% PT] = "PT"
ID[ID %in% DC] = "DC"
ID[ID %in% IC] = "IC"
ID[ID %in% B] = "B"
#make new idents equal to condensed idents
celltrek@meta.data$Idents = as.factor(ID)
Idents(celltrek) = as.factor(ID)
SpatialDimPlot(celltrek)
#get unique cell types
CT = unique(ID)
deconv = matrix(0,nrow(sobj_coord),length(CT))
colnames(deconv) = CT
rownames(deconv) = rownames(sobj_coord)
#match celltrek spots to visium
for(j in c(1:nrow(sobj_coord))){
#get spot j
spot = sobj_coord[j,]
#compute distance to each coord in celltrek
D = dist(spot, coord_mat,
method="euclidean")
#get matched cells
cells = which(D <= r)
if(length(cells)>0){
for(k in c(1:length(cells))){
#get cell type of matched cell
cell_type = ID[cells[k]]
#get which column of deconv should be updated
ind = which(CT == cell_type)
#update column of deconv_mat
deconv[j,ind] = deconv[j,ind] + 1
}
}
}
deconv = t(apply(deconv,1,function(x){x/sum(x)}))
deconv[is.na(deconv)] = 0
L = readRDS("C:\\Users\\Kaishu\\Desktop\\Amin_ST\\L.rds")
#remove cellt ypes that are not there
common_CT = colnames(deconv)[colnames(deconv)%in%rownames(L)]
deconv = deconv[,common_CT]
#do the same for library mat
common_CT = rownames(L)[rownames(L)%in%colnames(deconv)]
L = L[common_CT,]
#make colnames and rownames the same
deconv = deconv[,rownames(L)]
sobj@meta.data = cbind(sobj@meta.data,deconv)
for(ct in colnames(deconv)){
ct_file = gsub("/", "_", ct)
png(filename=paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\deconvolution\\" ,ct_file,"_celltrek_deconv.png"))
print(SpatialFeaturePlot(sobj,features = ct))
dev.off()
}
#make niche-DE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv,sigma = c(1,100,250),counts = T)
NDE = Filter_NDE(NDE,cell_names = rownames(deconv)[is.na(rowSums(NDE@num_cells))==F])
rm(list=setdiff(ls(), c("NDE","sample")))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
saveRDS(NDE,paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\nicheDE.rds"))
gc()
#make niche-DE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv,sigma = c(1,100,250),Int = T)
NDE = Filter_NDE(NDE,cell_names = rownames(deconv)[is.na(rowSums(NDE@num_cells))==F])
rm(list=setdiff(ls(), c("NDE","sample")))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
saveRDS(NDE,paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\nicheDE.rds"))
gc()
library(CellTrek)
library(ggplot2)
#library(nicheDE)
library(Seurat)
library(varhandle)
library(proxy)
#load cell trek data for HK2770
sample = "HK_2871"
sample_ = gsub("_","",sample)
if(sample %in% c("HK_2871","HK_2873")){
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SC_celltrek.New.4.11.2023.rds"))
}else{
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SN_celltrek.New.4.11.2023.rds"))
}
celltrek@meta.data$orig.ident = gsub("\\_","",celltrek@meta.data$orig.ident)
#plot celltrek results
Idents(celltrek) = celltrek@meta.data$Idents
#merge cell types
ID = unfactor(celltrek@meta.data$Idents)
#read in visium data
setwd("C:\\Users\\Kaishu\\Desktop\\Amin_ST")
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#get tissue coordiantes: celltrek
coord_mat = GetTissueCoordinates(celltrek)
#get tissue coordiantes: celltrek
sobj_coord = GetTissueCoordinates(sobj)
#get radius in pixel space
r = (sobj@images$slice1@scale.factors$fiducial * sobj@images$slice1@scale.factors$lowres)/2
#get cell types
celltypes = Idents(celltrek)
CT = unique(celltypes)
#put cell types into clusters
PT = c("PT_S1","PT_S2","PT_S3")
DC = c("pDC","cDC")
IC = c("IC_A","IC_B")
B = c("B_memory","B_Naiive","Plasma_Cells")
#merge cell types
ID[ID %in% PT] = "PT"
ID[ID %in% DC] = "DC"
ID[ID %in% IC] = "IC"
ID[ID %in% B] = "B"
#make new idents equal to condensed idents
celltrek@meta.data$Idents = as.factor(ID)
Idents(celltrek) = as.factor(ID)
SpatialDimPlot(celltrek)
#get unique cell types
CT = unique(ID)
deconv = matrix(0,nrow(sobj_coord),length(CT))
colnames(deconv) = CT
rownames(deconv) = rownames(sobj_coord)
#match celltrek spots to visium
for(j in c(1:nrow(sobj_coord))){
#get spot j
spot = sobj_coord[j,]
#compute distance to each coord in celltrek
D = dist(spot, coord_mat,
method="euclidean")
#get matched cells
cells = which(D <= r)
if(length(cells)>0){
for(k in c(1:length(cells))){
#get cell type of matched cell
cell_type = ID[cells[k]]
#get which column of deconv should be updated
ind = which(CT == cell_type)
#update column of deconv_mat
deconv[j,ind] = deconv[j,ind] + 1
}
}
}
deconv = t(apply(deconv,1,function(x){x/sum(x)}))
deconv[is.na(deconv)] = 0
L = readRDS("C:\\Users\\Kaishu\\Desktop\\Amin_ST\\L.rds")
#remove cellt ypes that are not there
common_CT = colnames(deconv)[colnames(deconv)%in%rownames(L)]
deconv = deconv[,common_CT]
#do the same for library mat
common_CT = rownames(L)[rownames(L)%in%colnames(deconv)]
L = L[common_CT,]
#make colnames and rownames the same
deconv = deconv[,rownames(L)]
sobj@meta.data = cbind(sobj@meta.data,deconv)
for(ct in colnames(deconv)){
ct_file = gsub("/", "_", ct)
png(filename=paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\deconvolution\\" ,ct_file,"_celltrek_deconv.png"))
print(SpatialFeaturePlot(sobj,features = ct))
dev.off()
}
#make niche-DE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv,sigma = c(1,100,250),Int = T)
NDE = Filter_NDE(NDE,cell_names = rownames(deconv)[is.na(rowSums(NDE@num_cells))==F])
rm(list=setdiff(ls(), c("NDE","sample")))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
saveRDS(NDE,paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\nicheDE.rds"))
gc()
library(CellTrek)
library(ggplot2)
#library(nicheDE)
library(Seurat)
library(varhandle)
library(proxy)
#load cell trek data for HK2770
sample = "HK_2873"
sample_ = gsub("_","",sample)
if(sample %in% c("HK_2871","HK_2873")){
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SC_celltrek.New.4.11.2023.rds"))
}else{
celltrek = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\", sample,"\\", sample_,".All.HK.SN_celltrek.New.4.11.2023.rds"))
}
celltrek@meta.data$orig.ident = gsub("\\_","",celltrek@meta.data$orig.ident)
#plot celltrek results
Idents(celltrek) = celltrek@meta.data$Idents
#merge cell types
ID = unfactor(celltrek@meta.data$Idents)
#read in visium data
setwd("C:\\Users\\Kaishu\\Desktop\\Amin_ST")
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#get tissue coordiantes: celltrek
coord_mat = GetTissueCoordinates(celltrek)
#get tissue coordiantes: celltrek
sobj_coord = GetTissueCoordinates(sobj)
#get radius in pixel space
r = (sobj@images$slice1@scale.factors$fiducial * sobj@images$slice1@scale.factors$lowres)/2
#get cell types
celltypes = Idents(celltrek)
CT = unique(celltypes)
#put cell types into clusters
PT = c("PT_S1","PT_S2","PT_S3")
DC = c("pDC","cDC")
IC = c("IC_A","IC_B")
B = c("B_memory","B_Naiive","Plasma_Cells")
#merge cell types
ID[ID %in% PT] = "PT"
ID[ID %in% DC] = "DC"
ID[ID %in% IC] = "IC"
ID[ID %in% B] = "B"
#make new idents equal to condensed idents
celltrek@meta.data$Idents = as.factor(ID)
Idents(celltrek) = as.factor(ID)
SpatialDimPlot(celltrek)
#get unique cell types
CT = unique(ID)
deconv = matrix(0,nrow(sobj_coord),length(CT))
colnames(deconv) = CT
rownames(deconv) = rownames(sobj_coord)
#match celltrek spots to visium
for(j in c(1:nrow(sobj_coord))){
#get spot j
spot = sobj_coord[j,]
#compute distance to each coord in celltrek
D = dist(spot, coord_mat,
method="euclidean")
#get matched cells
cells = which(D <= r)
if(length(cells)>0){
for(k in c(1:length(cells))){
#get cell type of matched cell
cell_type = ID[cells[k]]
#get which column of deconv should be updated
ind = which(CT == cell_type)
#update column of deconv_mat
deconv[j,ind] = deconv[j,ind] + 1
}
}
}
deconv = t(apply(deconv,1,function(x){x/sum(x)}))
deconv[is.na(deconv)] = 0
L = readRDS("C:\\Users\\Kaishu\\Desktop\\Amin_ST\\L.rds")
#remove cellt ypes that are not there
common_CT = colnames(deconv)[colnames(deconv)%in%rownames(L)]
deconv = deconv[,common_CT]
#do the same for library mat
common_CT = rownames(L)[rownames(L)%in%colnames(deconv)]
L = L[common_CT,]
#make colnames and rownames the same
deconv = deconv[,rownames(L)]
sobj@meta.data = cbind(sobj@meta.data,deconv)
for(ct in colnames(deconv)){
ct_file = gsub("/", "_", ct)
png(filename=paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\deconvolution\\" ,ct_file,"_celltrek_deconv.png"))
print(SpatialFeaturePlot(sobj,features = ct))
dev.off()
}
#make niche-DE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv,sigma = c(1,100,250),Int = T)
NDE = Filter_NDE(NDE,cell_names = rownames(deconv)[is.na(rowSums(NDE@num_cells))==F])
rm(list=setdiff(ls(), c("NDE","sample")))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
saveRDS(NDE,paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample,"\\nicheDE.rds"))
gc()
library(Matrix)
library(Seurat)
library(ggplot2)
library(abind)
library(enrichR)
#read in sample names
sample = c("HK_2871","HK_2873")
#read niche-DE objects
NDE_2871 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[1],"\\nicheDE.rds"))
NDE_2873 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[2],"\\nicheDE.rds"))
#merge objects
NDE = MergeObjects(list(NDE_1 = NDE_2871,NDE_2 = NDE_2873))
#calculate effecive niche
NDE = CalculateEffectiveNiche(NDE)
#register cluster
cl <- parallel::makeCluster(4,outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs2871.txt")
doParallel::registerDoParallel(cl)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-De
NDE = niche_DE_new(NDE,cluster = cl,C = 300,M = 20,gamma = 0.8,print = T,Int = T,self_EN = F)
#end time of function
end_time <- Sys.time()
#print how long it takes to run niche-DE
print(end_time-start_time)
#close cluster
doParallel::stopImplicitCluster()
saveRDS(NDE,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\integrated_2871_2873_nicheDE_new.rds")
NDE = readRDS("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\integrated_2871_2873_nicheDE_new.rds")
NDE_genes = get_niche_DE_genes(NDE,'I',index="Fibroblast",niche = "PT",pos = T,alpha = 0.05)
NDE_marker = niche_DE_markers(NDE,index = "Fibroblast",niche1 = "PT",niche2 = "Podo/Mes")
#find niche-DE genes
NDE_genes = get_niche_DE_genes(NDE,'I',index='Fibroblast',niche = 'PT',pos = T,alpha = 0.05)
#view gene table
View(NDE_genes)
#perform pathway enrichment analysis
NDE_processes = enrichr(NDE_genes[,1],databases = 'Reactome_2016')
View(NDE_processes$Reactome_2016)
NDE_lr = niche_LR_spot(NDE,ligand_cell = "Fibroblast",receptor_cell = "PT",
ligand_target_matrix = niche_net_ligand_target_matrix,
lr_mat = ramilowski_ligand_receptor_list, truncation_value = 5)
View(NDE_lr)
NDE@niche_DE$`1`$HES4
