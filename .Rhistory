ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
print(subclones_in_data)
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclones_in_data
rownames(new_L) = subclones_in_data
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
#L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
check = add_subclone("myCAF",clusters,deconv_mat,L)
total_clusters = rep(NA,ncol(t6))
#name clusters according to data spot names
names(total_clusters) = colnames(t6)
for(j in c(1:length(total_clusters))){
#get data spot name
spot = names(total_clusters)[j]
if(spot %in% names(clusters)){
#match clonalscope cluster to data spot name
spot_match = which(names(clusters)==spot)
#update spot cluster assignment
total_clusters[j] = clusters[spot_match]
}
}
#read in single cell reference
scref = readRDS("C:\\Users\\Kaishu\\Desktop\\ateeq_data\\sc_mostrecent.rds")
#get library matrix from scref
L = CreateLibraryMatrixFromSeurat(scref,assay = "RNA")
rm('scref')
#get coordinate matrix
coord_mat = GetTissueCoordinates(t6, image = "IU_PDA_T6")
#get counts matrix
counts_mat = t(as.matrix(t6@assays$Spatial@counts))
#get deconvolution matrix
deconv_mat = t(as.matrix(t6@assays$rctd_fullfinal@data))
#match rows of L with columns of deconvolution
L = L[colnames(deconv_mat),]
#add in information regarding subclones
add_subclone = function(major_cell_type, subclone_identities,deconv_mat,L,alpha = 0.5){
#change Library means and deconvolution matrix to data frame
#L = as.data.frame(L)
#deconv_mat = as.data.frame(deconv_mat)
#make sure major cell type is in scref
if(major_cell_type %in% rownames(L)==F){
stop('major cell type not in scref')
}
#get index of major cell type
ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
print(subclones_in_data)
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclones_in_data
rownames(new_L) = subclones_in_data
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
#L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
check = add_subclone("myCAF",clusters,deconv_mat,L)
add_subclone = function(major_cell_type, subclone_identities,deconv_mat,L,alpha = 0.5){
#change Library means and deconvolution matrix to data frame
#L = as.data.frame(L)
#deconv_mat = as.data.frame(deconv_mat)
#make sure major cell type is in scref
if(major_cell_type %in% rownames(L)==F){
stop('major cell type not in scref')
}
#get index of major cell type
ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
print(subclones_in_data)
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclones_in_data
rownames(new_L) = subclones_in_data
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
check = add_subclone("myCAF",clusters,deconv_mat,L)
View(check$deconv_mat)
add_subclone = function(major_cell_type, subclone_identities,deconv_mat,L,alpha = 0.5){
#change Library means and deconvolution matrix to data frame
#L = as.data.frame(L)
#deconv_mat = as.data.frame(deconv_mat)
#make sure major cell type is in scref
if(major_cell_type %in% rownames(L)==F){
stop('major cell type not in scref')
}
#get index of major cell type
ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
print(subclones_in_data)
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclone_names
rownames(new_L) = subclone_names
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
check = add_subclone("myCAF",clusters,deconv_mat,L)
View(check$deconv_mat)
B = check$deconv_mat
B = as.data.frame(check$deconv_mat)
summary(B$myCAF*B$myCAF_1*B$myCAF_12)
View(deconv_mat)
mean(deconv_mat[,10])
add_subclone = function(major_cell_type, subclone_identities,deconv_mat,L,alpha = 0.5){
#change Library means and deconvolution matrix to data frame
#L = as.data.frame(L)
#deconv_mat = as.data.frame(deconv_mat)
#make sure major cell type is in scref
if(major_cell_type %in% rownames(L)==F){
stop('major cell type not in scref')
}
#get index of major cell type
ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha & is.na(subclone_identities)==F)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclone_names
rownames(new_L) = subclone_names
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
check = add_subclone("myCAF",total_clusters,deconv_mat,L)
summary(B$myCAF*B$myCAF_1*B$myCAF_12)
B = as.data.frame(check$deconv_mat)
summary(B$myCAF*B$myCAF_1*B$myCAF_12)
#update sublcone info for myCAF
updated_subclone_info = add_subclone("myCAF",total_clusters,deconv_mat,L)
#extract new L and deconv_mat
L = updated_subclone_info$L
deconv_mat = updated_subclone_info$deconv_mat
#make niche-DE object
NDE = CreateNicheDEObject(counts_mat,coord_mat,L,deconv_mat,sigma = c(0.01,1,2))
View(NDE)
#make niche-DE object
NDE = CreateNicheDEObject(counts_mat,coord_mat,L,deconv_mat,sigma = c(1,100,200))
#calculate effective niche
NDE = CalculateEffectiveNiche(NDE)
#Perform niche-DE
NDE = niche_DE(NDE)
colsums(NDE@counts)
colSums(NDE@counts)
summary(colSums(NDE@counts))
#Perform niche-DE
NDE = niche_DE(NDE,C = 600,M = 50)
View(deconv_mat)
get_niche_DE_genes(NDE,"interaction",index = "Tumor Epithelial cells",niche = "myCAF_12")
check = get_niche_DE_genes(NDE,"interaction",index = "Tumor Epithelial cells",niche = "myCAF_12")
View(check)
tumor_CAF_12 = get_niche_DE_genes(NDE,"interaction",index = "Tumor Epithelial cells",niche = "myCAF_12")
tumor_CAF_1 = get_niche_DE_genes(NDE,"interaction",index = "Tumor Epithelial cells",niche = "myCAF_1")
ImageDimPlot(t6,fov = "IU_PDA_T6")
tumor_CAF_markers = niche_DE_markers(NDE,index = "Tumor Epithelial cells",niche1 ="myCAF_12", niche2 = "myCAF_1" )
View(tumor_CAF_markers)
View(tumor_CAF_12)
View(tumor_CAF_1)
tumor_CAF_markers = niche_DE_markers(NDE,index = "Tumor Epithelial cells",niche1 ="myCAF_1", niche2 = "myCAF_12" )
View(tumor_CAF_markers)
#I should standardize niche-De to be min-spot 1. Currently is 100
library(Seurat)
library(nicheDE)
#load sample data t6,h6,l6
load("C:/Users/Kaishu/Desktop/ateeq_data/Samples.RData")
#read in clonalscope results for t6
cov_obj = readRDS("C:\\Users\\Kaishu\\Desktop\\ateeq_data\\h6l6t6\\pt6\\Cov_obj.rds")
#esxtract clusters (via Zest)
clusters = cov_obj$result_final$result$Zest
#update clonalscope clsuters to include all cells
total_clusters = rep(NA,ncol(t6))
#name clusters according to data spot names
names(total_clusters) = colnames(t6)
for(j in c(1:length(total_clusters))){
#get data spot name
spot = names(total_clusters)[j]
if(spot %in% names(clusters)){
#match clonalscope cluster to data spot name
spot_match = which(names(clusters)==spot)
#update spot cluster assignment
total_clusters[j] = clusters[spot_match]
}
}
#read in single cell reference
scref = readRDS("C:\\Users\\Kaishu\\Desktop\\ateeq_data\\sc_mostrecent.rds")
#get library matrix from scref
L = CreateLibraryMatrixFromSeurat(scref,assay = "RNA")
rm('scref')
#get coordinate matrix
coord_mat = GetTissueCoordinates(t6, image = "IU_PDA_T6")
#get counts matrix
counts_mat = t(as.matrix(t6@assays$Spatial@counts))
#get deconvolution matrix
deconv_mat = t(as.matrix(t6@assays$rctd_fullfinal@data))
#match rows of L with columns of deconvolution
L = L[colnames(deconv_mat),]
#add in information regarding subclones
add_subclone = function(major_cell_type, subclone_identities,deconv_mat,L,alpha = 0.5){
#change Library means and deconvolution matrix to data frame
#L = as.data.frame(L)
#deconv_mat = as.data.frame(deconv_mat)
#make sure major cell type is in scref
if(major_cell_type %in% rownames(L)==F){
stop('major cell type not in scref')
}
#get index of major cell type
ind_ref = which(rownames(L)==major_cell_type)
if(major_cell_type %in% colnames(deconv_mat)==F){
stop('major cell type not in deconvolution')
}
#get column that has major cell type
ind_deconv = which(colnames(deconv_mat)==major_cell_type)
#get spots that will be annotated as having the majority CT
spots_with_majority_CT = which(deconv_mat[,ind_deconv]>alpha & is.na(subclone_identities)==F)
#get the subclones these spots are classified as
subclones_in_data = unique(subclone_identities[spots_with_majority_CT])
#remove NAs
subclones_in_data = subclones_in_data[is.na(subclones_in_data)==F]
#get number of subclones
n_subclone = length(subclones_in_data)
#make names for these sublclones
subclone_names = paste0(major_cell_type,"_",subclones_in_data)
#initialize new matrix which will contain this data
new_deconv = matrix(NA,nrow(deconv_mat),n_subclone)
new_L = matrix(NA,n_subclone,ncol(L))
#renames rows and columns
colnames(new_deconv) = subclone_names
rownames(new_L) = subclone_names
#list which subtypes are in which spots
for(j in c(1:n_subclone)){
#update library reference
new_L[j,] = L[ind_ref,]
#update deonvolution
new_deconv[,j] = deconv_mat[,ind_deconv]*0
#subclone j
matching_subclone_j = (subclone_identities[spots_with_majority_CT] == subclones_in_data[j])
#update deconvolution matrix
new_deconv[spots_with_majority_CT,j] = deconv_mat[spots_with_majority_CT,ind_deconv]*matching_subclone_j
}
#remove spots in deconv_mat that have subclones
deconv_mat[spots_with_majority_CT,ind_deconv] = 0
#update L and deconv
L = rbind(L,new_L)
deconv_mat = cbind(deconv_mat,new_deconv)
#order rows of L by columsn in deconv_mat
L = L[colnames(deconv_mat),]
#return outputs
return(list(L = L,deconv_mat = deconv_mat))
}
#update sublcone info for myCAF
updated_subclone_info = add_subclone("Tumor Epithelial cells",total_clusters,deconv_mat,L)
#extract new L and deconv_mat
L = updated_subclone_info$L
deconv_mat = updated_subclone_info$deconv_mat
View(deconv_mat)
#make niche-DE object
NDE = CreateNicheDEObject(counts_mat,coord_mat,L,deconv_mat,sigma = c(1,100,200))
#calculate effective niche
NDE = CalculateEffectiveNiche(NDE)
#Perform niche-DE
NDE = niche_DE(NDE)
NDE = niche_DE(NDE,C = 600,M = 30)
tumor_CAF_1 = get_niche_DE_genes(NDE,"interaction",index = "myCAF_12",niche = "Tumor Epithelial cells_1")
tumor_CAF_12 = get_niche_DE_genes(NDE,"interaction",index = "myCAF_12",niche = "Tumor Epithelial cells_12")
tumor_CAF_1 = get_niche_DE_genes(NDE,"interaction",index = "myCAF",niche = "Tumor Epithelial cells_1")
tumor_CAF_12 = get_niche_DE_genes(NDE,"interaction",index = "myCAF",niche = "Tumor Epithelial cells_12")
tumor_CAF_markers = niche_DE_markers(NDE,index = "my_CAF",niche1 ="Tumor Epithelial cells_1",
niche2 = "Tumor Epithelial cells_12" )
tumor_CAF_markers = niche_DE_markers(NDE,index = "myCAF",niche1 ="Tumor Epithelial cells_1",
niche2 = "Tumor Epithelial cells_12" )
View(tumor_CAF_markers)
tumor_CAF_markers_2 = niche_DE_markers(NDE,index = "myCAF",niche1 ="Tumor Epithelial cells_12",
niche2 = "Tumor Epithelial cells_1" )
View(tumor_CAF_markers)
View(tumor_CAF_markers_2)
library(enrichR)
?enrichr
#gwt enrihcment
tumor_CAF_1_pathways = enrichr(tumor_CAF_1,databases ='Reactome_2016')
View(tumor_CAF_1_pathways)
View(tumor_CAF_1)
#gwt enrihcment
tumor_CAF_1_pathways = enrichr(tumor_CAF_1$Genes,databases ='Reactome_2016')
View(tumor_CAF_1_pathways)
View(tumor_CAF_1_pathways)
#gwt enrihcment
tumor_CAF_1_pathways = enrichr(tumor_CAF_1$Genes,databases ='Reactome_2016')$`Reactome_2016`
View(tumor_CAF_1_pathways)
#get enriched pathways
tumor_CAF_12_pathways = enrichr(tumor_CAF_12$Genes,databases ='Reactome_2016')$`Reactome_2016`
View(tumor_CAF_12)
View(tumor_CAF_12_pathways)
View(tumor_CAF_1_pathways)
tumor_CAF_markers_1_12 = niche_DE_markers(NDE,index = "myCAF",niche1 ="Tumor Epithelial cells_1",
niche2 = "Tumor Epithelial cells_12" )
#get positive niche marker genes in myCAF when near tumor sublcone 1 compared to subclone 12
tumor_CAF_markers_12_1 = niche_DE_markers(NDE,index = "myCAF",niche1 ="Tumor Epithelial cells_12",
niche2 = "Tumor Epithelial cells_1" )
#get enriched pathways
View(deconv_mat)
coords = as.data.frame(coord_mat)
sub1 = which(deconv_mat[,16]>0)
sub2 = which(deconv_mat[,17]>0)
subs = rep(NA,nrow(coords))
subs[sub1] = "subclone_1"
subs[sub2] = "subclone_12"
coords = coords%>%mutate(subclone = subs)
library(ggplot2)
library(dplyr)
coords = as.data.frame(coord_mat)
sub1 = which(deconv_mat[,16]>0)
sub2 = which(deconv_mat[,17]>0)
subs = rep(NA,nrow(coords))
subs[sub1] = "subclone_1"
subs[sub2] = "subclone_12"
coords = coords%>%mutate(subclone = subs)
View(coords)
View(coords)
View(coords)
ggplot(coords) + geom_point(aes(x = imagerow,y=imagecol,color = subclone))
deconv = as.data.frame(deconv_mat)
#get differenitally enriched pathways (positive in 1 as compared to 12)
tumor_CAF_1_12_pathways = enrichr(tumor_CAF_markers_1_12$Genes,databases ='Reactome_2016')$`Reactome_2016`
#get differenitally enriched pathways (positive in 12 as compared to 1)
tumor_CAF_12_1_pathways = enrichr(tumor_CAF_markers_12_1$Genes,databases ='Reactome_2016')$`Reactome_2016`
View(tumor_CAF_1_12_pathways)
View(tumor_CAF_12_1_pathways)
View(tumor_CAF_markers_12_1)
View(tumor_CAF_markers_12_1)
View(tumor_CAF_12)
View(tumor_CAF_markers_1_12)
View(tumor_CAF_1_12_pathways)
View(tumor_CAF_12_1_pathways)
tumor_CAF_1_12_pathways = enrichr(tumor_CAF_markers_1_12$Genes,databases ='Reactome_2016')$`Reactome_2016`
#get differenitally enriched pathways (positive in 12 as compared to 1)
tumor_CAF_12_1_pathways = enrichr(tumor_CAF_markers_12_1$Genes,databases ='Reactome_2016')$`Reactome_2016`
tumor_CAF_markers_1_12$Genes
tumor_CAF_markers_12_1$Genes
View(tumor_CAF_12_1_pathways)
enrichr(tumor_CAF_markers_12_1$Genes,databases ='Reactome_2016')$`Reactome_2016`
tumor_CAF_12_1_pathways = enrichr(tumor_CAF_markers_12_1$Genes,databases ='Reactome_2016')$`Reactome_2016`
View(tumor_CAF_12_1_pathways)
saveRDS(NDE,"C:/Users/Kaishu/Desktop/ateeq_data/t6_NDE.rds")
