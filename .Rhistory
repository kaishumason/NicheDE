}
return(X_partial)
}
X = niche_DE_core_new(object,j,sig,CT_filter,M,gamma,Int)
X
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
return(list(null = null,null_ind = null_ind))
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X = niche_DE_core_new(object,j,sig,CT_filter,M,gamma,Int)
X$null
X$null_ind
X$null[8]<10
X$null < M
which(X$null<M)
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = (null < M)
return(list(null = null,null_ind = null_ind))
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X = niche_DE_core_new(object,j,sig,CT_filter,M,gamma,Int)
X$null_ind
X$null_ind
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = (null < M)
return(list(null = null,null_ind = null_ind))
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
return(list(null = null,null_ind = null_ind))
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
lm = lm((object@counts[,j] - object@null_expected_expression[,j]) ~ X_partial)
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
lm = lm((object@counts[,j] - object@null_expected_expression[,j]) ~ X_partial)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 4,Int = F)
#end time of function
end_time <- Sys.time()
NDE_par[[9]]
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 4,Int = F)
#end time of function
end_time <- Sys.time()
NDE_par@niche_DE$`1`$beta[,,9]
lm$coefficients
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
lm = lm((object@counts[,j] - object@null_expected_expression[,j]) ~ X_partial)
NDE_par@niche_DE$`1`$beta[,,9]
lm$coefficients
object = NDE
j = 9
sig = 1
C = 150
M = 10
gamma = 0.8
Int = F
CT_filter = apply(object@ref_expr,1,function(x){quantile(x,gamma)})
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null_ind = which(null < M)
return(null)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
X_partial
niche_DE_core_new = function(object,j,sig,CT_filter,C = 150,M = 10,gamma = 0.8,Int = T){
valid = 0
liks_val = NA
n_type = ncol(object@num_cells)
#check if we need to do niche-DE
if((sum(object@counts[,j])<C) | (mean(object@ref_expr[,j]<CT_filter)!=1)==F){
null = c(1:n_type^2)
liks_val = NA
}
if((sum(object@counts[,j])>C)&(mean(object@ref_expr[,j]<CT_filter)!=1)){
#get pstg matrix
#print(j)
#t1 = Sys.time()
pstg = object@num_cells%*%as.matrix(diag(object@ref_expr[,j]))/object@null_expected_expression[,j]
pstg[,object@ref_expr[,j]<CT_filter] = 0
pstg[pstg<0.05]=0
#get X
#print(1)
X = matrix(NA,nrow(pstg),n_type^2)
#get counter
counter = which(object@sigma == sig)[1]
for(k in c(1:nrow(pstg))){
#get feature matrix by multiplying effective niche and pstg vector
ps = as.matrix(pstg[k,])
EN_j = round(object@effective_niche[[counter]][k,],2)
cov_j = ps%*%t(EN_j)
#make into a vector
X[k,] = as.vector(t(cov_j))#important to take the transpose
}
#get index, niche pairs that are non existent
#null = which(apply(X,2,function(x){sum(x>0,na.rm = T)})<M)
null = apply(X,2,function(x){sum(x>0,na.rm = T)})
null = which(null < M)
#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
#continue if at least one index,niche pair is viable
}
return(X_partial)
}
X_partial = niche_DE_core_new(object = object,j = j,sig = sig,CT_filter = CT_filter,M = M,gamma = gamma,Int = Int)
lm = lm((object@counts[,j] - object@null_expected_expression[,j]) ~ X_partial)
lm$coefficients
NDE_par@niche_DE$`1`$beta[,,9]
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
#make NDE object
NDE = CreateNicheDEObjectFromSeurat(sobj,"Spatial",L,deconv_est,c(1,100,200))
#calculate Effective niche
NDE = CalculateEffectiveNiche(NDE)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE = niche_DE(NDE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
#start time of funtion
start_time <- Sys.time()
#run niche-DE
NDE_par = niche_DE_parallel(NDE,cores = 8,Int = F)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
NDE_par@niche_DE$`1`$nulls[[9]]
NDE@niche_DE$`1`$nulls[[9]]
NDE@niche_DE$`1`$nulls[[4]]
NDE_par@niche_DE$`1`$nulls[[4]]
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site()
# library(devtools)
# install_github("navinlabcode/CellTrek")
devtools::install_github("Kmason23/NicheDE") # install
