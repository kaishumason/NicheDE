#print(length(null))
X_partial = X
rest = c(1:ncol(X))
if(length(null)>0){
X_partial = X[,-null]
rest = rest[-null]
}
f(constants$batch == T &length(unique(constants$batchID)) > 1){
batchvar = as.factor(constants$batchID)
}else{
batchvar = rep(1,length(counts))
}
if(constants$batch == T &length(unique(constants$batchID)) > 1){
batchvar = as.factor(constants$batchID)
}else{
batchvar = rep(1,length(counts))
}
nvar = ncol(X_partial)
#if expected expression for a spot is 0, remove it
bad_ind  = which(EEJ==0)
#run neg binom regression
if(length(bad_ind)>0){
full_glm =suppressWarnings({glm(counts[-bad_ind]~X_partial[-bad_ind,] + batchvar[-bad_ind]+ offset(log(EEJ[-bad_ind])), family = "poisson")}) #do full glm
}else{
full_glm = suppressWarnings({glm(counts~X_partial + batchvar + offset(log(EEJ)), family = "poisson")}) #do full glm
}
mu_hat = as.numeric(exp(predict(full_glm)))#get mean
#get dicpersion parameter
A = optimize(nb_lik,x = counts,mu = mu_hat, lower = 0.05, upper = 100) #get overdispersion parameter
#save dispersion parameter
disp = A$minimum
#save likelihood
liks_val = -A$objective
#calculate W matrix for distribution of beta hat
W =as.vector(mu_hat/(1 + mu_hat/disp))#get W matrix
rm("mu_hat")
#perform cholesky decomp for finding inverse of X^TWX
if(length(bad_ind)>0){
X_partial = X_partial[-bad_ind,]
#X_partial = Matrix::Matrix(X_partial, sparse=TRUE)
}
if(constants$batch == T &length(unique(constants$batchID)) > 1){
if(length(bad_ind)>0){
dummy_col = fastDummies::dummy_cols(batchvar[-bad_ind],remove_first_dummy = T, remove_selected_columns = T)
}else{
dummy_col = fastDummies::dummy_cols(batchvar,remove_first_dummy = T, remove_selected_columns = T)
}
#append dummy variables and intercept
X_partial = cbind(X_partial,dummy_col)
X_partial = cbind(X_partial,rep(1,nrow(X_partial)))
}else{
#append dummy variables and intercept
X_partial = cbind(X_partial,rep(1,nrow(X_partial)))
}
X_partial = as.matrix(X_partial)
X_partial = Matrix::Matrix(X_partial, sparse=TRUE)
#get variance matrix. Variance is [t(X_partial*W)%*%X_partial]^(-1)
var_mat = Matrix::t(X_partial*W)%*%X_partial
#subset to get covariance of variables or interest
#var_mat = var_mat[1:nvar,1:nvar]
rm("X_partial")
#gc()
#if there are degenerate columns, remove them
new_null = c()
#account for batch ID variables
new_null = which(diag(as.matrix(var_mat))==0)
if(length(new_null)>0){
var_mat = var_mat[-new_null,-new_null]
null = sort(c(null,rest[new_null[new_null <= nvar]]))
new_null = new_nul[new_null <= var]
}
if(length(null)!=n_type^2){
#get coefficients for important variables and intercept
coeff = full_glm$coefficients[1:(nvar+1)]
coeff[is.na(coeff)] = 0
#cholesky decomposition
A = Matrix::chol(var_mat,LDL = FALSE,perm = FALSE)
#get covaraince matrix
V = Matrix::solve(A)%*%Matrix::t(Matrix::solve(A))
V = V[1:(n_type^2-length(null)),1:(n_type^2-length(null))]
#save V as an upper triangular matrix
V =  Matrix::Matrix(upper.tri(V,diag = T)*V, sparse=TRUE)
#remove large objects
rm("A")
rm("var_mat")
#get sd matrix
tau = sqrt(Matrix::diag(V))
#print("3")
V_ = matrix(NA,n_type,n_type)
if(length(null)==0){
V_ = matrix(tau,n_type,n_type)
}else{
V_[c(1:n_type^2)[-null]] = tau}
#get beta
beta = matrix(NA,n_type,n_type)
if(length(new_null)>0){
beta[c(1:n_type^2)[-null]] = coeff[-c(1,new_null+1)]
}
if(length(new_null)==0){
if(length(null)==0){
beta = matrix(coeff[-c(1)],n_type,n_type)
}else{
beta[c(1:n_type^2)[-null]] = coeff[-c(1)]}
}
#record test statitistic
T_ = beta/V_
beta = Matrix::t(beta)
T_ = Matrix::t(T_)
#make rownames and column names correspond to cell types
colnames(beta) = paste0("n: ",constants$cell_types)
rownames(beta) = paste0("i: ",constants$cell_types)
colnames(T_) = paste0("n: ",constants$cell_types)
rownames(T_) = paste0("i: ",constants$cell_types)
valid = 1
}
beta
T_
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
library(varhandle)
library(patchwork)
library(foreach)
library(doParallel)
library(parallel)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver1",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver2",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\ST-liver4",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium",
"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22996_visium\\outs")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,100,250))
#NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,200,500))
counter_rank = counter_rank + 1
}
Merged_NDE = MergeObjects(NDE_obj)
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
rm(list=setdiff(ls(), "Merged_NDE"))
cl <- parallel::makeCluster(2,outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs880.txt")
doParallel::registerDoParallel(cl)
#start time of function
start_time <- Sys.time()
#run niche-DE
Merged_NDE = niche_DE_parallel_new(Merged_NDE,cluster = cl,C = 400,gamma = 0.8,print = T,Int = T,batch = TRUE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
doParallel::stopImplicitCluster()
print(Merged_NDE)
0.5*1.4716*2.1708
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
saveRDS(Merged_NDE,'merged_NDE_22261_fisher_new.rds')
which(Merged_NDE@gene_names == "COL15A1")
Merged_NDE@niche_DE$`1`$COL15A1
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
cl <- parallel::makeCluster(2,outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs880.txt")
doParallel::registerDoParallel(cl)
#start time of function
start_time <- Sys.time()
#run niche-DE
Merged_NDE = niche_DE_parallel_new(Merged_NDE,cluster = cl,C = 400,gamma = 0.8,print = T,Int = T,batch = TRUE)
#end time of function
end_time <- Sys.time()
print(end_time-start_time)
doParallel::stopImplicitCluster()
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
saveRDS(Merged_NDE,'merged_NDE_22261_fisher_new.rds')
Merged_NDE@niche_DE$`1`$COL15A1
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
Merged_NDE = readRDS('merged_NDE_22261_fisher_new.rds')
rm(list=setdiff(ls(), c("Merged_NDE")))
#Figure 4 Pathway enrichment analysis for fibroblasts and tumor
library(enrichR)
#get fibroblast tumor niche genes
fibro_tum_pos = get_niche_DE_genes(Merged_NDE,'I',index='stromal',niche = 'tumor_epithelial',positive = T,alpha = 0.05)
#write.csv(fibro_tum_pos,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\gene_lists\\fibroblast_tumor_positive_genes.csv")
#perform pathway enrichment analysis
fibro_tum_processes = enrichr(fibro_tum_pos[,1],databases = 'Reactome_2016')
View(fibro_tum_processes$Reactome_2016)
write.csv(fibro_tum_processes$Reactome_2016,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\pathway_enrichment\\fibroblast_tumor_processes.csv")
#Figure 4 Niche LR analysis for fibroblasts and tumor
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
fibro_tumor_LR = niche_LR_spot_new(Merged_NDE,'tumor_epithelial','stromal',niche_net_ligand_target_matrix,
ramilowski_ligand_receptor_list,25,50,0.05)
write.csv(fibro_tumor_LR,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\ligand_receptor\\tumor_fibro_lr_pairs.csv")
#Figure 5 Pathway enrichment analysis for macrophages and tumor
library(enrichR)
#get fibroblast tumor niche genes
macro_tum_pos = get_niche_DE_genes(Merged_NDE,'I',index='myeloid',niche = 'tumor_epithelial',positive = T,alpha = 0.05)
write.csv(macro_tum_pos,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\gene_lists\\macrophage_tumor_positive_genes.csv")
#perform pathway enrichment analysis
macro_tum_processes = enrichr(macro_tum_pos[,1],databases = 'Reactome_2016')
View(macro_tum_processes$Reactome_2016)
write.csv(macro_tum_processes$Reactome_2016,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\pathway_enrichment\\macrophage_tumor_processes.csv")
#Figure 5 LR analysis for macrophages and tumor
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
macro_tumor_LR = niche_LR_spot_new(Merged_NDE,'tumor_epithelial','myeloid',niche_net_ligand_target_matrix,
ramilowski_ligand_receptor_list,25,50,0.05)
write.csv(macro_tumor_LR,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\ligand_receptor\\tumor_macro_lr_pairs.csv")
#Figure 5 TAM markers and normal macrophage markers
foamy = read.csv("C:\\Users\\Kaishu\\Downloads\\marker_gene_lists\\mCRC_scRNAseq.csv",header = T)
foamy_val = foamy[which((foamy$cluster == "tumor")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]
foamy_genes = foamy[which((foamy$cluster == "tumor")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]$gene
normal_genes = foamy[which((foamy$cluster == "normal")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]$gene
tum_marker = niche_DE_markers_new(Merged_NDE,'myeloid','tumor_epithelial','hepatocytes+cholangiocytes',0.05)[,1]
View(as.matrix(tum_marker))
length(tum_marker)
length(which(foamy_genes%in%tum_marker))
write.csv(tum_marker,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\marker_genes\\TAM_marker_genes.csv")
norm_marker = niche_DE_markers_new(Merged_NDE,'myeloid','hepatocytes+cholangiocytes','tumor_epithelial',0.05)[,1]
length(norm_marker)
length(which(normal_genes%in%norm_marker))
write.csv(norm_marker,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\marker_genes\\normal_macrophage_marker_genes.csv")
#Figure 5 pathway analysis of TAM markers
TAM_processes = enrichr(tum_marker,databases = 'Reactome_2016')
View(TAM_processes$Reactome_2016)
write.csv(TAM_processes$Reactome_2016,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\pathway_enrichment\\TAM_tumor_processes.csv")
TAM_processes = enrichr(tum_marker,databases = 'Reactome_2016')
View(TAM_processes$Reactome_2016)
macro_tum_processes = enrichr(macro_tum_pos[,1],databases = 'Reactome_2016')
View(macro_tum_processes$Reactome_2016)
View(macro_tumor_LR)
View(fibro_tum_processes$Reactome_2016)
View(fibro_tumor_LR)
#Figure 5 LR analysis for macrophages and tumor
data("niche_net_ligand_target_matrix")
data("ramilowski_ligand_receptor_list")
macro_tumor_LR = niche_LR_spot_new(Merged_NDE,'tumor_epithelial','myeloid',niche_net_ligand_target_matrix,
ramilowski_ligand_receptor_list,25,50,0.05)
write.csv(macro_tumor_LR,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\ligand_receptor\\tumor_macro_lr_pairs.csv")
#Figure 5 TAM markers and normal macrophage markers
foamy = read.csv("C:\\Users\\Kaishu\\Downloads\\marker_gene_lists\\mCRC_scRNAseq.csv",header = T)
foamy_val = foamy[which((foamy$cluster == "tumor")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]
foamy_genes = foamy[which((foamy$cluster == "tumor")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]$gene
normal_genes = foamy[which((foamy$cluster == "normal")&(foamy$avg_logFC > 0)&(foamy$p_val_adj < 0.05)),]$gene
tum_marker = niche_DE_markers_new(Merged_NDE,'myeloid','tumor_epithelial','hepatocytes+cholangiocytes',0.05)[,1]
View(as.matrix(tum_marker))
length(tum_marker)
length(which(foamy_genes%in%tum_marker))
write.csv(tum_marker,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\marker_genes\\TAM_marker_genes.csv")
norm_marker = niche_DE_markers_new(Merged_NDE,'myeloid','hepatocytes+cholangiocytes','tumor_epithelial',0.05)[,1]
length(norm_marker)
length(which(normal_genes%in%norm_marker))
write.csv(norm_marker,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\marker_genes\\normal_macrophage_marker_genes.csv")
#Figure 5 pathway analysis of TAM markers
TAM_processes = enrichr(tum_marker,databases = 'Reactome_2016')
View(TAM_processes$Reactome_2016)
write.csv(TAM_processes$Reactome_2016,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Supplementary\\niche_de_results\\integrated_data\\pathway_enrichment\\TAM_tumor_processes.csv")
View(as.matrix(normal_genes))
View(as.matrix(norm_marker))
norm_marker[norm_marker%in%normal_genes]
norm_marker[tum_marker%in%foamy_genes]
tum_marker[tum_marker%in%foamy_genes]
sort(tum_marker[tum_marker%in%foamy_genes])
tum_marker = niche_DE_markers_new(Merged_NDE,'myeloid','tumor_epithelial','hepatocytes+cholangiocytes',0.05)
View(tum_marker)
norm_marker = niche_DE_markers_new(Merged_NDE,'myeloid','hepatocytes+cholangiocytes','tumor_epithelial',0.05)
View(norm_marker)
NDE = readRDS("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\integrated_2871_2873_nicheDE.rds")
library(Matrix)
library(Seurat)
library(ggplot2)
library(abind)
library(enrichR)
#read in sample names
sample = c("HK_2871","HK_2873")
#read niche-DE objects
NDE_2871 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[1],"\\nicheDE.rds"))
NDE_2873 = readRDS(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\",sample[2],"\\nicheDE.rds"))
#merge objects
NDE = MergeObjects(list(NDE_1 = NDE_2871,NDE_2 = NDE_2873))
#calculate effecive niche
NDE = CalculateEffectiveNiche(NDE)
#register cluster
cl <- parallel::makeCluster(4,outfile = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\logs2871.txt")
doParallel::registerDoParallel(cl)
#run niche-DE
#start time of funtion
start_time <- Sys.time()
#run niche-De
NDE = niche_DE_parallel_new(NDE,cluster = cl,C = 300,M = 20,gamma = 0.8,print = T,Int = T)
#end time of function
end_time <- Sys.time()
#print how long it takes to run niche-DE
print(end_time-start_time)
#close cluster
doParallel::stopImplicitCluster()
saveRDS(NDE,"C:\\Users\\Kaishu\\Dropbox (Penn)\\Amin_Data\\integrated_2871_2873_nicheDE.rds")
betas_all = lapply(object@niche_DE[[1]], function(result) result$betas)
t_all = lapply(object@niche_DE[[1]], function(result) result$T_stat)
betas_all = lapply(NDE@niche_DE[[1]], function(result) result$betas)
t_all = lapply(NDE@niche_DE[[1]], function(result) result$T_stat)
NDE@gene_names
length(NDE@gene_names)
A = rep(NA,18*18*16000)
object.size(A)
object.size(A)/1e9
for(j in c(1:length(NDE@gene_names))){
beta = as.vector(betas_all[[j]])
t_stat = as.vector(t_all[[j]])
n = length(beta)
m = length(T_stat)
start = 18*18*(j-1)+1
A[start:(start + n-1)] = beta
B[start:(start+m-1)] = t_stat
}
for(j in c(1:length(NDE@gene_names))){
beta = as.vector(betas_all[[j]])
t_stat = as.vector(t_all[[j]])
n = length(beta)
m = length(t_stat)
start = 18*18*(j-1)+1
A[start:(start + n-1)] = beta
B[start:(start+m-1)] = t_stat
}
A = rep(NA,18*18*16000)
B = rep(NA,18*18*16000)
for(j in c(1:length(NDE@gene_names))){
beta = as.vector(betas_all[[j]])
t_stat = as.vector(t_all[[j]])
n = length(beta)
m = length(t_stat)
start = 18*18*(j-1)+1
A[start:(start + n-1)] = beta
B[start:(start+m-1)] = t_stat
}
A
plot(A,B)
beta
plot(A,T_to_p(B,alternative = "two.sided"))
A = A[-ind]
B= B[-ind]
ind = which(is.na(A)==F and is.na(B)==F)
A = A[-ind]
B= B[-ind]
ind = which(is.na(A)==F & is.na(B)==F)
A = A[-ind]
B= B[-ind]
plot(A,T_to_p(B,alternative = "two.sided"))
T_to_p(B,alternative = "two.sided")
A = rep(NA,18*18*16000)
B = rep(NA,18*18*16000)
for(j in c(1:length(NDE@gene_names))){
beta = as.vector(betas_all[[j]])
t_stat = as.vector(t_all[[j]])
n = length(beta)
m = length(t_stat)
start = 18*18*(j-1)+1
A[start:(start + n-1)] = beta
B[start:(start+m-1)] = t_stat
}
ind = which(is.na(A)==F & is.na(B)==F)
A = A[ind]
B= B[ind]
plot(A,T_to_p(B,alternative = "two.sided"))
A
summary(A)
plot(A,-log(T_to_p(B,alternative = "two.sided")))
NDE@niche_DE$`1`$COL4A1
sample = 'ST-liver1'
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample))
#make object
Merged_NDE = readRDS('merged_NDE_22261_fisher_new.rds')
rm(list=setdiff(ls(), c("Merged_NDE")))
Merged_NDE@niche_DE$`1`$COL4A1
Merged_NDE@niche_DE$`1`$COL4A2
Merged_NDE@niche_DE$`1`$SPP1
Merged_NDE@effective_niche
View(Merged_NDE@effective_niche)
Merged_NDE@effective_niche[["1"]]
View(Merged_NDE@effective_niche[["1"]])
View(Merged_NDE@effective_niche[["1"]])
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
roxygen2::roxygenise(clean = TRUE)
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\NicheDE_github")
devtools::document()
roxygen2::roxygenise(clean = TRUE)
library(pkgdown)
pkgdown::build_site_github_pages()
#usethis::use_vignette("Installation")
#usethis::use_vignette("Deconvolution")
#usethis::use_vignette("Average_Expression_Profile_Calculation")
#usethis::use_vignette("Object_Creation")
#usethis::use_vignette("Object_Creation_Seurat")
#usethis::use_vignette("Effective_Niche_Calculation")
#usethis::use_vignette("Performing_Niche_DE")
#usethis::use_vignette("Getting_Niche_DE_Genes")
#usethis::use_vignette("Marker_Genes")
#usethis::use_vignette("Ligand_Receptor_Analysis")
pkgdown::build_site()
