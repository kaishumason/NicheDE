#abc = readRDS(paste0(sample,'_NGA_',type,'.rds'))
abc = readRDS(paste0(sample,'_NGA_full_normalized','.rds'))
deconv_true = readRDS('deconv_filtered.rds')
deconv_true = as.matrix(deconv_true)
deconv_est = deconv_true
counts = sobj@assays$Spatial@counts
counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
#read in reference
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\scRNA_mCRC_reference_merged")
L= readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
sim_gene = which(colnames(L) %in% rownames(abc$pg_hoch))
L = L[,sim_gene]
mean(colnames(L)==rownames(abc$pg_hoch))
mean(colnames(L)==dimnames(abc$pgt_analysis$pgt)[[3]])
K = get_K(coord,rank = 0.05)
materials = get_materials(counts,deconv_true,L,K)
nst = materials$nst
EN = materials$EN
#EEX = materials$EEX
colloc = matrix(NA,nrow(deconv_est),ncol(deconv_est)^2)
for(k in c(1:nrow(nst))){
ns = as.matrix(nst[k,])
ps = as.matrix(EN[k,])
EN_j = EN[k,]- nst[k,]
cov_j = ns%*%t(EN_j)
colloc[k,] = as.vector(t(cov_j))
}
ntype = ncol(deconv_est)
colnames(colloc) = c(1:ncol(colloc))
for(cell_type in colnames(deconv_est)){
for(niche_type in colnames(deconv_est)){
type_ind = which(colnames(deconv_est) == cell_type)
niche_ind = which(colnames(deconv_est) == niche_type)
colnames(colloc)[ntype*(type_ind-1) + niche_ind] = paste0(cell_type,":x:",niche_type)
}
}
#View(colloc)
sobj@meta.data = cbind(sobj@meta.data,colloc)
colnames(deconv_est)
sobj@meta.data = cbind(sobj@meta.data,deconv_est)
#visualize deonvolution if wanted
setwd(paste0("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\CancerDiscovery_mCRC_Visium_scRNA\\ST\\",sample,"\\images\\Deconv"))
types=  colnames(deconv_est)
for(j in c(1:length(types))){
png(paste0(types[j],"_deconv_plot.png"))
print(SpatialFeaturePlot(sobj, features = types[j]))
dev.off()
}
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(0,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,0.75,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,0.75,2,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,2,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,1,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
AK = c(0.0683,0.3012,0.5,0.4324,0.4324)
JJ = c(0.1845,0.1845,0.5645,0.1845,0.5)
QQ = c(0.1845,0.1845,0.5645,0.5,0.8155)
QQ_combos = c(6,6,16,1,6)
JJ_combos = c(6,6,16,6,1)
AK_combos = c(3,3,9,6,6)
freq = c(1,1,1,0.5,0)
weighted.mean(AK,AK_combos*freq)
weighted.mean(QQ,QQ_combos*freq)
weighted.mean(JJ,JJ_combos*freq)
four_size = c(19.75,23.25,25)
req = (100-four_size)/201.5
req
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
devtools::document()
library(nicheDE)
load(niche_net_ligand_target_matrix)
load("niche_net_ligand_target_matrix")
load("niche_net_ligand_target_matrix.rda")
load("niche_net_ligand_target_matrix")
library(nicheDE)
data("niche_net_ligand_target_matrix")
View(niche_net_ligand_target_matrix)
A = apply(niche_net_ligand_target_matrix,2,function(order(x,decreasing = T)))
A = apply(niche_net_ligand_target_matrix,2,function(order(x,decreasing = T)))
A = apply(niche_net_ligand_target_matrix,2,function{order(x,decreasing = T)})
A = apply(niche_net_ligand_target_matrix,2,function(x){order(x,decreasing = T)})
View(A)
apply(A,1,function(x){mean(x<=200)})
imp = apply(A,1,function(x){sum(x<=200)})
summary(imp)
mean(imp == 0)
sum(imp == 0)
imp = apply(A,1,function(x){sum(x<=100)})
sum(imp == 0)
library(pkgdown)
usethis::use_pkgdown()
usethis::use_pkgdown_github_pages()
devtools::document()
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(url = 'kmason23-nicheDE.com')
pkgdown::build_site(destination = 'kmason23-nicheDE.com')
pkgdown::build_site(override = list(url = 'kmason23-nicheDE.com'))
pkgdown::build_site(override = list(reference))
pkgdown::build_site()
render_page()
pkgdown::render_page()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
devtools::document()
pkgdown::build_site()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
devtools::document()
pkgdown::build_site(override = list(url = 'https://kmason23-nicheDE.com'))
pkgdown::build_tutorials()
pkgdown::preview_page()
pkgdown::preview_site()
pkgdown::build_tutorials(pkg = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE")
pkgdown::build_tutorials(pkg = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE",preview = T)
pkgdown::build_articles(pkg = "C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE",preview = T)
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
usethis::use_pkgdown_github_pages()
?use_git
usethis::use_pkgdown_github_pages()
pkgdown::preview_page()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site(preview = TRUE)
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
pkgdown::build_site("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
pkgdown::build_site("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
pkgdown::build_site_github_pages("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
pkgdown::build_site_github_pages("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github",preview =TRUE)
preview_site("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github",preview = T)
pkgdown::preview_site("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github",preview = T)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("Tutorial")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(ggplot2)
#generate coordiantes
coord = expand.grid(c(1:20),c(1:20))
colnames(coord) = c('x','y')
#get distance matrix
D = as.matrix(dist(coord,method = 'euclidean',diag = T))
#extract center distances
D = D[190,]
#make center circle red to distinguish
red = rep('black',length(D))
red[190] = 'red'
#make dataframe
coord = data.frame(coord,D,red)
ggplot(coord,aes(x,y,size=ifelse(D==0, NA, D),color = red))+geom_point()+
scale_color_manual(red, values = c("black", "red"))+ theme(legend.position="none")
library(ggplot2)
#generate coordiantes
coord = expand.grid(c(1:20),c(1:20))
colnames(coord) = c('x','y')
#get distance matrix
D = as.matrix(dist(coord,method = 'euclidean',diag = T))
#extract center distances
D = D[190,]
#make center circle red to distinguish
red = rep('black',length(D))
red[190] = 'red'
#make dataframe
coord = data.frame(coord,D,red)
ggplot(coord,aes(x,y,color = red))+geom_point()+
scale_color_manual(red, values = c("black", "red"))+ theme(legend.position="none")
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
devtools::document()
pkgdown::build_site_github_pages()
pkgdown::build_site()
pkgdown::build_site_github_pages()
devtools::document()
devtools::document()
library(nicheDE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site()
devtools::document()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site()
remove.packages("nicheDE")
devtools::install_github('https://github.com/Kmason23/NicheDE')
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
devtools::install_github('https://github.com/Kmason23/NicheDE')
library(nicheDE)
library(RCTD)
library(Matrix)
library(Seurat)
library(ggplot2)
library(patchwork)
library(abind)
library(enrichR)
library(varhandle)
filter = c(2,3,5)
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\new_reference")
#L = read.table(file = "Library_reference.txt", sep = " ")
L = readRDS('L_merge.rds')
colnames(L) = toupper(colnames(L))
L = as.matrix(L)
L = L[-filter,]
direcs = c("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\Crc_Visium_deeper_sequencing\\22261_visium")
NDE_obj = vector(mode = 'list',length = 5)
counter_rank = 1
tum_hep_ind = c(1,4)
for(sample in direcs){
sobj = Load10X_Spatial(sample, filename="filtered_feature_bc_matrix.h5")
#Make object
counts = sobj@assays$Spatial@counts
dim(counts)
counts = apply(counts,1,function(x){pmin(x,quantile(x,0.995))})
counts = floor(counts)
#counts = t(counts)
coord = sobj@images[["slice1"]]@coordinates[,4:5]
deconv_true = readRDS(paste0(sample,'\\deconv_merge.rds'))
deconv_true = as.matrix(deconv_true)
deconv_true[,tum_hep_ind[1]] = deconv_true[,tum_hep_ind[1]]*(deconv_true[,tum_hep_ind[1]]>0.25)
deconv_true[,tum_hep_ind[2]] = deconv_true[,tum_hep_ind[2]]*(deconv_true[,tum_hep_ind[2]]>0.25)
#remove rare CT
deconv_true = deconv_true[,-filter]
NDE_obj[[counter_rank]] = CreateNicheDEObject(counts,coord,L,deconv_true,sigma = c(1,400,1000))
counter_rank = counter_rank + 1
}
Merged_NDE = NDE_obj[[1]]
Merged_NDE = CalculateEffectiveNiche(Merged_NDE)
print(Merged_NDE)
Merged_NDE
print.Niche_DE = function(object){
A = paste0('Niche-DE object with ',nrow(object@counts),' observations, ', ncol(object@counts),' genes, ',
length(unique(object@batch_ID)), ' batches, and ', length(object@cell_types), ' cell types.')
return(A)
}
print(Merged_NDE
)
devtools::document()
setwd("C:\\Users\\Kaishu\\Dropbox (Penn)\\Visium\\niche_DE_package\\nicheDE_github")
devtools::document()
Merged_NDE
?install_github
devtools::install_github(https://github.com/Kmason23/NicheDE,force = T)
devtools::install_github("https://github.com/Kmason23/NicheDE",force = T)
